{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///Validator.umd.min.js","webpack:///webpack/bootstrap cfafcd5acc46fb1e00f5","webpack:///./src/Validator.js","webpack:///./src/Messages.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_typeof","Symbol","iterator","constructor","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_Messages","_Messages2","Validator","data","rules","customMessages","arguments","undefined","parseRules","failedRules","errors","rule","implicitRules","indexOf","name","getRule","rulesToCheck","a","filter","item","Array","isArray","b","params","count","Error","self","arr","forEach","push","parseItemRules","split","ruleAndArgs","trim","args","titleCase","str","delimiter","map","toUpperCase","slice","toLowerCase","join","replace","validate","passes","hasError","msg","getMessage","doReplacements","snakeCase","type","getDataType","hasRule","numericRules","replacer","apply","error","getValue","method","console","addFailure","addError","message","hasData","validateRequired","names","result","allFailingRequired","anyFailingRequired","requireParameterCount","toString","values","re","RegExp","test","validateMatch","acceptable","validateSame","other","validateNumeric","len","getSize","size","hasNumeric","isNaN","parseFloat","arrayDiff","arr1","arr2","diff","validateIn","segments","validateBetween","Date","date","validateDate","parse","JSON","err","find","string","getDataName","strReplace","replaceSame","replaceBetween","getDisplayableValue","replaceIn","getDataNameList","replaceRequiredWith","shift","replaceBefore","dependentRules","get","accepted","after","alpha","alpha_dash","alpha_num","array","before","between","numeric","file","boolean","confirmed","date_format","different","digits","digits_between","email","exists","filled","image","in","integer","ip","json","max","mimes","min","not_in","regex","required","required_if","required_unless","required_with","required_with_all","required_without","required_without_all","same","url"],"mappings":"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","file":"Validator.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Validator\"] = factory();\n\telse\n\t\troot[\"Validator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Validator\"] = factory();\n\telse\n\t\troot[\"Validator\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Messages = __webpack_require__(1);\n\t\n\tvar _Messages2 = _interopRequireDefault(_Messages);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Validator = function () {\n\t    function Validator(data, rules) {\n\t        var customMessages = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\t\n\t        _classCallCheck(this, Validator);\n\t\n\t        this.data = data;\n\t        this.rules = this.parseRules(rules);\n\t        this.failedRules = [];\n\t        this.errors = null;\n\t        this.customMessages = customMessages;\n\t    }\n\t\n\t    _createClass(Validator, [{\n\t        key: 'isImplicit',\n\t        value: function isImplicit(rule) {\n\t            return this.implicitRules.indexOf(rule) > -1;\n\t        }\n\t    }, {\n\t        key: 'hasData',\n\t        value: function hasData(name) {\n\t            return typeof this.data[name] !== 'undefined';\n\t        }\n\t    }, {\n\t        key: 'hasRule',\n\t        value: function hasRule(name, rules) {\n\t            return this.getRule(name, rules) !== null;\n\t        }\n\t    }, {\n\t        key: 'getRule',\n\t        value: function getRule(name, rulesToCheck) {\n\t            var a = this.rules.filter(function (item) {\n\t                return item.name === name;\n\t            });\n\t\n\t            if (a.length === 0) {\n\t                return null;\n\t            } else {\n\t                a = a[0];\n\t            }\n\t\n\t            if (!Array.isArray(rulesToCheck)) {\n\t                rulesToCheck = [rulesToCheck];\n\t            }\n\t\n\t            var b = a.rules.filter(function (rule) {\n\t                return rulesToCheck.indexOf(rule.name) >= 0;\n\t            });\n\t\n\t            return b.length === 0 ? null : [b[0].name, b[0].params];\n\t        }\n\t    }, {\n\t        key: 'requireParameterCount',\n\t        value: function requireParameterCount(count, params, rule) {\n\t            if (params.length < count) {\n\t                throw new Error('Validation rule ' + rule + ' requires at least ' + count + ' parameters');\n\t            }\n\t        }\n\t    }, {\n\t        key: 'parseRules',\n\t        value: function parseRules(rules) {\n\t            var self = this;\n\t            var arr = [];\n\t\n\t            rules.forEach(function (item) {\n\t                arr.push({\n\t                    name: item.name,\n\t                    rules: self.parseItemRules(item.rules)\n\t                });\n\t            });\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'parseItemRules',\n\t        value: function parseItemRules(rule) {\n\t            var self = this;\n\t            var arr = [];\n\t\n\t            rule.split('|').forEach(function (ruleAndArgs) {\n\t                if (ruleAndArgs.trim()) {\n\t                    var args = ruleAndArgs.split(':');\n\t                    arr.push({\n\t                        name: self.titleCase(args[0], '_'),\n\t                        params: args[1] ? args[1].split(',') : []\n\t                    });\n\t                }\n\t            });\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'titleCase',\n\t        value: function titleCase(str, delimiter) {\n\t            delimiter = delimiter || ' ';\n\t            return str.split(delimiter).map(function (item) {\n\t                return item[0].toUpperCase() + item.slice(1).toLowerCase();\n\t            }).join('');\n\t        }\n\t    }, {\n\t        key: 'snakeCase',\n\t        value: function snakeCase(str, delimiter) {\n\t            delimiter = delimiter || '_';\n\t            return str.replace(/((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))(?=[A-Z])/g, '$1' + delimiter).toLowerCase();\n\t        }\n\t    }, {\n\t        key: 'getValue',\n\t        value: function getValue(name) {\n\t            if (typeof this.data[name] === 'undefined') {\n\t                return '';\n\t            }\n\t\n\t            return this.data[name];\n\t        }\n\t    }, {\n\t        key: 'passes',\n\t        value: function passes() {\n\t            var self = this;\n\t            this.errors = [];\n\t            this.failedRules = [];\n\t\n\t            this.rules.forEach(function (item) {\n\t                var name = item.name.toLowerCase();\n\t                item.rules.forEach(function (rule) {\n\t                    self.validate(name, rule);\n\t                });\n\t            });\n\t\n\t            return this.errors.length === 0;\n\t        }\n\t    }, {\n\t        key: 'fails',\n\t        value: function fails() {\n\t            return !this.passes();\n\t        }\n\t    }, {\n\t        key: 'valid',\n\t        value: function valid() {\n\t            if (!this.errors) {\n\t                this.passes();\n\t            }\n\t\n\t            var arr = [];\n\t            for (key in this.data) {\n\t                if (!this.hasError(key)) {\n\t                    arr.push(key);\n\t                }\n\t            }\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'invalid',\n\t        value: function invalid() {\n\t            if (!this.errors) {\n\t                this.passes();\n\t            }\n\t\n\t            var arr = [];\n\t            for (key in this.data) {\n\t                if (this.hasError(key)) {\n\t                    arr.push(key);\n\t                }\n\t            }\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'getErrorMsg',\n\t        value: function getErrorMsg(name, rule) {\n\t            var msg = this.getMessage(name, rule);\n\t\n\t            return this.doReplacements(msg, name, rule);\n\t        }\n\t    }, {\n\t        key: 'getMessage',\n\t        value: function getMessage(name, rule) {\n\t            var key = this.snakeCase(rule.name);\n\t            var msg = this.customMessages[name + '.' + key];\n\t\n\t            if (typeof msg !== 'undefined') {\n\t                return msg;\n\t            }\n\t\n\t            msg = _Messages2.default[key];\n\t            // message might has sub-rule\n\t            if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {\n\t                var type = this.getDataType(name);\n\t                msg = _Messages2.default[key][type];\n\t            }\n\t\n\t            return typeof msg === 'undefined' ? '' : msg;\n\t        }\n\t    }, {\n\t        key: 'getDataType',\n\t        value: function getDataType(name) {\n\t            if (this.hasRule(name, this.numericRules)) {\n\t                return 'numeric';\n\t            } else if (this.hasRule(name, ['Array'])) {\n\t                return 'array';\n\t            }\n\t            /* SKIP file type */\n\t\n\t            return 'string';\n\t        }\n\t    }, {\n\t        key: 'doReplacements',\n\t        value: function doReplacements(msg, name, rule) {\n\t            if (msg.trim() === '') {\n\t                return '';\n\t            }\n\t\n\t            msg = msg.replace(':ATTR', name.toUpperCase()).replace(':Attr', this.titleCase(name)).replace(':attr', name);\n\t\n\t            // call replacer\n\t            var replacer = this['replace' + rule.name];\n\t            if (typeof replacer === 'function') {\n\t                msg = replacer.apply(this, [msg, name, rule.name, rule.params]);\n\t            }\n\t\n\t            return msg;\n\t        }\n\t    }, {\n\t        key: 'hasError',\n\t        value: function hasError() {\n\t            var name = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            if (name === null) {\n\t                return this.errors.length > 0;\n\t            }\n\t\n\t            var errors = this.errors.filter(function (error) {\n\t                return error.name === name.toLowerCase();\n\t            });\n\t\n\t            return errors.length > 0;\n\t        }\n\t    }, {\n\t        key: 'getErrors',\n\t        value: function getErrors() {\n\t            return this.errors;\n\t        }\n\t    }, {\n\t        key: 'validate',\n\t        value: function validate(name, rule) {\n\t            var value = this.getValue(name);\n\t            var method = this['validate' + rule.name];\n\t\n\t            if (typeof method !== 'function') {\n\t                console.error('\"' + rule.name + '\" validation rule does not exist!');\n\t            }\n\t\n\t            // return method.apply(this, [name, value, rule.params])\n\t            if (!method.apply(this, [name, value, rule.params])) {\n\t                this.addFailure(name, rule);\n\t            }\n\t        }\n\t        /*\r\n\t            isValidatable(rule, name, value) {\r\n\t                return this.presentOrRuleIsImplicit(rule, name, value) &&\r\n\t                       this.passesOptionalCheck(name) &&\r\n\t                       this.hasNotFailedPreviousRuleIfPresenceRule(rule, name)\r\n\t            }\r\n\t        \r\n\t            presentOrRuleIsImplicit(rule, name, value) {\r\n\t                return this.validateRequired(name, value) || this.isImplicit(rule)\r\n\t            }\r\n\t        \r\n\t            passesOptionalCheck(name) {\r\n\t                return true\r\n\t            }\r\n\t        \r\n\t            hasNotFailedPreviousRuleIfPresenceRule(rule, name) {\r\n\t                return true\r\n\t            }\r\n\t        */\n\t\n\t    }, {\n\t        key: 'addFailure',\n\t        value: function addFailure(name, rule) {\n\t            this.addError(name, rule);\n\t\n\t            this.failedRules.push({\n\t                name: name,\n\t                rule: rule.name,\n\t                params: rule.params\n\t            });\n\t        }\n\t    }, {\n\t        key: 'addError',\n\t        value: function addError(name, rule) {\n\t            var msg = this.getMessage(name, rule);\n\t\n\t            msg = this.doReplacements(msg, name, rule);\n\t\n\t            this.errors.push({\n\t                name: name,\n\t                rule: rule.name,\n\t                message: msg\n\t            });\n\t        }\n\t\n\t        /** Validation Rules **/\n\t\n\t    }, {\n\t        key: 'validateSometimes',\n\t        value: function validateSometimes() {\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateBail',\n\t        value: function validateBail() {\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'shouldStopValidating',\n\t        value: function shouldStopValidating(name) {\n\t            if (!this.hasRule(name, ['Bail'])) {\n\t                return false;\n\t            }\n\t\n\t            return this.hasError(name);\n\t        }\n\t    }, {\n\t        key: 'validateRequired',\n\t        value: function validateRequired(name, value, params) {\n\t            if (value === null) {\n\t                return false;\n\t            } else if (typeof value === 'string' && value.trim() === '') {\n\t                return false;\n\t            } else if (Array.isArray(value) && value.length < 1) {\n\t                return false;\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validatePresent',\n\t        value: function validatePresent(name, value, params) {\n\t            return typeof this.data[name] !== 'undefined';\n\t        }\n\t    }, {\n\t        key: 'validateFilled',\n\t        value: function validateFilled(name, value) {\n\t            if (this.hasData(name)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'anyFailingRequired',\n\t        value: function anyFailingRequired(names) {\n\t            var self = this;\n\t            var result = false;\n\t\n\t            names.forEach(function (name) {\n\t                if (!self.validateRequired(name, self.getValue(name))) {\n\t                    result = true;\n\t                    return;\n\t                }\n\t            });\n\t\n\t            return result;\n\t        }\n\t    }, {\n\t        key: 'allFailingRequired',\n\t        value: function allFailingRequired(names) {\n\t            var self = this;\n\t            var result = true;\n\t\n\t            names.forEach(function (name) {\n\t                if (self.validateRequired(name, self.getValue(name))) {\n\t                    result = false;\n\t                    return;\n\t                }\n\t            });\n\t\n\t            return result;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWith',\n\t        value: function validateRequiredWith(name, value, params) {\n\t            if (!this.allFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWithAll',\n\t        value: function validateRequiredWithAll(name, value, params) {\n\t            if (!this.anyFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWithout',\n\t        value: function validateRequiredWithout(name, value, params) {\n\t            if (this.anyFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWithoutAll',\n\t        value: function validateRequiredWithoutAll(name, value, params) {\n\t            if (this.allFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredIf',\n\t        value: function validateRequiredIf(name, value, params) {\n\t            this.requireParameterCount(2, params, 'required_if');\n\t\n\t            var data = this.getValue(params[0]);\n\t            if (typeof data === 'boolean') {\n\t                data = data.toString();\n\t            }\n\t\n\t            var values = params.slice(1);\n\t\n\t            if (values.indexOf(data) >= 0) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredUnless',\n\t        value: function validateRequiredUnless(name, value, params) {\n\t            this.requireParameterCount(2, params, 'required_unless');\n\t\n\t            var data = this.getValue(params[0]);\n\t\n\t            var values = params.slice(1);\n\t\n\t            if (values.indexOf(data) < 0) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'getPresentCount',\n\t        value: function getPresentCount(names) {\n\t            var self = this;\n\t            var count = 0;\n\t\n\t            names.forEach(function (name) {\n\t                if (typeof self.data[name] !== 'undefined') {\n\t                    count++;\n\t                }\n\t            });\n\t\n\t            return count;\n\t        }\n\t    }, {\n\t        key: 'validateMatch',\n\t        value: function validateMatch(name, value, params) {\n\t            if (!(params instanceof Array)) {\n\t                params = [params];\n\t            }\n\t\n\t            if (!(value instanceof Array)) {\n\t                value = [value];\n\t            }\n\t\n\t            var re = params[0];\n\t\n\t            if (!(re instanceof RegExp)) {\n\t                re = re.split('/');\n\t                re = new RegExp(re[1], re[2]);\n\t            }\n\t\n\t            return re.test(value);\n\t        }\n\t    }, {\n\t        key: 'validateRegex',\n\t        value: function validateRegex(name, value, params) {\n\t            return this.validateMatch(name, value, params);\n\t        }\n\t    }, {\n\t        key: 'validateAccepted',\n\t        value: function validateAccepted(name, value) {\n\t            var acceptable = ['yes', 'on', '1', 1, true, 'true'];\n\t\n\t            return this.validateRequired(name, value) && acceptable.indexOf(value) >= 0;\n\t        }\n\t    }, {\n\t        key: 'validateArray',\n\t        value: function validateArray(name, value) {\n\t            if (typeof this.data[name] === 'undefined') {\n\t                return true;\n\t            }\n\t\n\t            return value === null || Array.isArray(value);\n\t        }\n\t    }, {\n\t        key: 'validateConfirmed',\n\t        value: function validateConfirmed(name, value) {\n\t            return this.validateSame(name, value, [name + '_confirmation']);\n\t        }\n\t    }, {\n\t        key: 'validateSame',\n\t        value: function validateSame(name, value, params) {\n\t            this.requireParameterCount(1, params, 'same');\n\t\n\t            var other = this.data[params[0]];\n\t\n\t            return typeof other !== 'undefined' && value === other;\n\t        }\n\t    }, {\n\t        key: 'validateDifferent',\n\t        value: function validateDifferent(name, value, params) {\n\t            this.requireParameterCount(1, params, 'different');\n\t\n\t            var other = this.data[params[0]];\n\t\n\t            return typeof other !== 'undefined' && value !== other;\n\t        }\n\t    }, {\n\t        key: 'validateDigits',\n\t        value: function validateDigits(name, value, params) {\n\t            this.requireParameterCount(1, params, 'digits');\n\t\n\t            return this.validateNumeric(name, value) && value.toString().length == params[0];\n\t        }\n\t    }, {\n\t        key: 'validateDigitsBetween',\n\t        value: function validateDigitsBetween(name, value, params) {\n\t            this.requireParameterCount(2, params, 'digits_between');\n\t\n\t            var len = value.toString().length;\n\t\n\t            return this.validateNumeric(name, value) && len >= params[0] && len <= params[1];\n\t        }\n\t    }, {\n\t        key: 'validateSize',\n\t        value: function validateSize(name, value, params) {\n\t            this.requireParameterCount(1, params, 'size');\n\t\n\t            return this.getSize(name, value) == params[0];\n\t        }\n\t    }, {\n\t        key: 'validateBetween',\n\t        value: function validateBetween(name, value, params) {\n\t            this.requireParameterCount(2, params, 'between');\n\t\n\t            var size = this.getSize(name, value);\n\t\n\t            return size >= params[0] && size <= params[1];\n\t        }\n\t    }, {\n\t        key: 'validateMin',\n\t        value: function validateMin(name, value, params) {\n\t            this.requireParameterCount(1, params, 'min');\n\t\n\t            return this.getSize(name, value) >= params[0];\n\t        }\n\t    }, {\n\t        key: 'validateMax',\n\t        value: function validateMax(name, value, params) {\n\t            this.requireParameterCount(1, params, 'max');\n\t\n\t            return this.getSize(name, value) <= params[0];\n\t        }\n\t    }, {\n\t        key: 'getSize',\n\t        value: function getSize(name, value) {\n\t            var hasNumeric = this.hasRule(name, this.numericRules);\n\t\n\t            if (hasNumeric && !isNaN(parseFloat(value))) {\n\t                return parseFloat(value);\n\t            }\n\t\n\t            // for array and string\n\t            return value.length;\n\t        }\n\t    }, {\n\t        key: 'validateIn',\n\t        value: function validateIn(name, value, params) {\n\t            if (Array.isArray(value) && this.hasRule(name, 'Array')) {\n\t                var arr = this.arrayDiff(value, params);\n\t                return arr.length === 0;\n\t            }\n\t\n\t            return params.indexOf(value) >= 0;\n\t        }\n\t    }, {\n\t        key: 'arrayDiff',\n\t        value: function arrayDiff(arr1, arr2) {\n\t            var diff = [];\n\t            arr1.forEach(function (item) {\n\t                if (arr2.indexOf(item) < 0) {\n\t                    diff.push(item);\n\t                }\n\t            });\n\t            return diff;\n\t        }\n\t    }, {\n\t        key: 'validateNotIn',\n\t        value: function validateNotIn(name, value, params) {\n\t            this.requireParameterCount(1, params, 'not_in');\n\t\n\t            return !this.validateIn(name, value, params);\n\t        }\n\t    }, {\n\t        key: 'validateNumeric',\n\t        value: function validateNumeric(name, value) {\n\t            return this.validateMatch(name, value, /^-?\\d+(\\.\\d*)?$/);\n\t        }\n\t    }, {\n\t        key: 'validateInteger',\n\t        value: function validateInteger(name, value) {\n\t            return this.validateMatch(name, value, /^-?\\d+$/);\n\t        }\n\t    }, {\n\t        key: 'validateString',\n\t        value: function validateString(name, value) {\n\t            if (!this.hasData(name)) {\n\t                return true;\n\t            }\n\t\n\t            return value === null || typeof value === 'string';\n\t        }\n\t    }, {\n\t        key: 'validateEmail',\n\t        value: function validateEmail(name, value) {\n\t            return this.validateMatch(name, value, /^[A-Z0-9._%+\\-]+@[A-Z0-9.\\-]+\\.[A-Z]{2,4}$/i);\n\t        }\n\t    }, {\n\t        key: 'validateIp',\n\t        value: function validateIp(name, value) {\n\t            var segments = value.split('.');\n\t\n\t            if (segments.length === 4 && this.validateBetween(name, segments[0], [1, 255]) && this.validateBetween(name, segments[1], [0, 255]) && this.validateBetween(name, segments[2], [0, 255]) && this.validateBetween(name, segments[3], [1, 255])) {\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'validateUrl',\n\t        value: function validateUrl(name, value) {\n\t            return this.validateMatch(name, value, /^(https?|ftp):\\/\\/[^\\s\\/$.?#].[^\\s]*$/i);\n\t        }\n\t    }, {\n\t        key: 'validateAlpha',\n\t        value: function validateAlpha(name, value) {\n\t            return this.validateMatch(name, value, /^([a-z])+$/i);\n\t        }\n\t    }, {\n\t        key: 'validateAlphaNum',\n\t        value: function validateAlphaNum(name, value) {\n\t            return this.validateMatch(name, value, /^([a-z0-9])+$/i);\n\t        }\n\t    }, {\n\t        key: 'validateAlphaDash',\n\t        value: function validateAlphaDash(name, value) {\n\t            return this.validateMatch(name, value, /^([a-z0-9_\\-])+$/i);\n\t        }\n\t    }, {\n\t        key: 'validateBefore',\n\t        value: function validateBefore(name, value, params) {\n\t            this.requireParameterCount(1, params, 'before');\n\t\n\t            if (typeof value !== 'string' && typeof value !== 'number' && !(value instanceof Date)) {\n\t                return false;\n\t            }\n\t\n\t            var date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0];\n\t\n\t            if (!this.validateDate(name, date)) {\n\t                console.error(params[0] + ' does not appear to be a date.');\n\t                return false;\n\t            }\n\t\n\t            return Date.parse(value) < Date.parse(date);\n\t        }\n\t    }, {\n\t        key: 'validateAfter',\n\t        value: function validateAfter(name, value, params) {\n\t            this.requireParameterCount(1, params, 'after');\n\t\n\t            if (typeof value !== 'string' && typeof value !== 'number' && !(value instanceof Date)) {\n\t                return false;\n\t            }\n\t\n\t            var date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0];\n\t\n\t            if (!this.validateDate(name, date)) {\n\t                console.error(params[0] + ' does not appear to be a date.');\n\t                return false;\n\t            }\n\t\n\t            return Date.parse(value) > Date.parse(date);\n\t        }\n\t    }, {\n\t        key: 'validateDate',\n\t        value: function validateDate(name, value) {\n\t            if (value instanceof Date) {\n\t                return true;\n\t            }\n\t\n\t            if (typeof value !== 'string' && typeof value !== 'number') {\n\t                return false;\n\t            }\n\t\n\t            return !isNaN(Date.parse(value));\n\t        }\n\t    }, {\n\t        key: 'validateBoolean',\n\t        value: function validateBoolean(name, value) {\n\t            if (!this.hasData(name)) {\n\t                return true;\n\t            }\n\t\n\t            var acceptable = [true, false, 0, 1, '0', '1'];\n\t\n\t            return value === null || acceptable.indexOf(value) >= 0;\n\t        }\n\t    }, {\n\t        key: 'validateJson',\n\t        value: function validateJson(name, value) {\n\t            try {\n\t                JSON.parse(value);\n\t                return true;\n\t            } catch (err) {\n\t                return false;\n\t            }\n\t        }\n\t\n\t        /*---- Replacers ----*/\n\t\n\t    }, {\n\t        key: 'strReplace',\n\t        value: function strReplace(find, replace, string) {\n\t            if (!Array.isArray(find)) {\n\t                find = [find];\n\t            }\n\t            if (!Array.isArray(replace)) {\n\t                replace = [replace];\n\t            }\n\t            for (var i = 0; i < find.length; i++) {\n\t                string = string.replace(find[i], replace[i]);\n\t            }\n\t\n\t            return string;\n\t        }\n\t    }, {\n\t        key: 'getDisplayableValue',\n\t        value: function getDisplayableValue(name, value) {\n\t            return value;\n\t        }\n\t    }, {\n\t        key: 'getDataNameList',\n\t        value: function getDataNameList(values) {\n\t            var names = [];\n\t\n\t            for (var key in values) {\n\t                names.push({\n\t                    key: this.getDataName(values[key])\n\t                });\n\t            }\n\t\n\t            return names;\n\t        }\n\t    }, {\n\t        key: 'getDataName',\n\t        value: function getDataName(name) {\n\t            return name;\n\t        }\n\t    }, {\n\t        key: 'replaceBetween',\n\t        value: function replaceBetween(msg, name, rule, params) {\n\t            return this.strReplace([':min', ':max'], params, msg);\n\t        }\n\t    }, {\n\t        key: 'replaceDifferent',\n\t        value: function replaceDifferent(msg, name, rule, params) {\n\t            return this.replaceSame(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceDigits',\n\t        value: function replaceDigits(msg, name, rule, params) {\n\t            return this.strReplace(':digits', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceDigitsBetween',\n\t        value: function replaceDigitsBetween(msg, name, rule, params) {\n\t            return this.replaceBetween(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceMin',\n\t        value: function replaceMin(msg, name, rule, params) {\n\t            return this.strReplace(':min', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceMax',\n\t        value: function replaceMax(msg, name, rule, params) {\n\t            return this.strReplace(':max', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceIn',\n\t        value: function replaceIn(msg, name, rule, params) {\n\t            var self = this;\n\t            params = params.map(function (value) {\n\t                return self.getDisplayableValue(name, value);\n\t            });\n\t\n\t            return this.strReplace(':values', params.join(', '), msg);\n\t        }\n\t    }, {\n\t        key: 'replaceNotIn',\n\t        value: function replaceNotIn(msg, name, rule, params) {\n\t            return this.replaceIn(msg, name, rule, params);\n\t        }\n\t\n\t        // replaceInArray()\n\t        // replaceMimes()\n\t\n\t    }, {\n\t        key: 'replaceRequiredWith',\n\t        value: function replaceRequiredWith(msg, name, rule, params) {\n\t            params = this.getDataNameList(params);\n\t\n\t            return this.strReplace(':values', params.join(' / '), msg);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredWithAll',\n\t        value: function replaceRequiredWithAll(msg, name, rule, params) {\n\t            return this.replaceRequiredWith(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredWithout',\n\t        value: function replaceRequiredWithout(msg, name, rule, params) {\n\t            return this.replaceRequiredWith(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredWithoutAll',\n\t        value: function replaceRequiredWithoutAll(msg, name, rule, params) {\n\t            return this.replaceRequiredWith(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredIf',\n\t        value: function replaceRequiredIf(msg, name, rule, params) {\n\t            params[1] = this.getDisplayableValue(params[0], this.data[params[0]]);\n\t\n\t            params[0] = this.getDataName(params[0]);\n\t\n\t            return this.strReplace([':other', ':value'], params, msg);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredUnless',\n\t        value: function replaceRequiredUnless(msg, name, rule, params) {\n\t            var other = this.getDataName(params.shift());\n\t\n\t            return this.strReplace([':other', ':values'], [other, params.join(', ')], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceSame',\n\t        value: function replaceSame(msg, name, rule, params) {\n\t            return this.strReplace(':other', name, msg);\n\t        }\n\t    }, {\n\t        key: 'replaceSize',\n\t        value: function replaceSize(msg, name, rule, params) {\n\t            return this.strReplace(':size', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceBefore',\n\t        value: function replaceBefore(msg, name, rule, params) {\n\t            if (isNaN(Date.parse(params[0]))) {\n\t                return this.strReplace(':date', this.getDataName(params[0]), msg);\n\t            }\n\t\n\t            return this.strReplace(':date', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceAfter',\n\t        value: function replaceAfter(msg, name, rule, params) {\n\t            return this.replaceBefore(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'dependsOnOtherFields',\n\t        value: function dependsOnOtherFields(rule) {\n\t            return this.dependentRules.indexOf(rule);\n\t        }\n\t    }, {\n\t        key: 'dateRules',\n\t        get: function get() {\n\t            return ['Before', 'After', 'DateBetween'];\n\t        }\n\t    }, {\n\t        key: 'sizeRules',\n\t        get: function get() {\n\t            return ['Size', 'Between', 'Min', 'Max'];\n\t        }\n\t    }, {\n\t        key: 'numericRules',\n\t        get: function get() {\n\t            return ['Numeric', 'Integer'];\n\t        }\n\t    }, {\n\t        key: 'implicitRules',\n\t        get: function get() {\n\t            return ['Required', 'Filled', 'RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll', 'RequiredIf', 'RequiredUnless', 'Accepted', 'Present'];\n\t        }\n\t    }, {\n\t        key: 'dependentRules',\n\t        get: function get() {\n\t            return ['RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll', 'RequiredIf', 'RequiredUnless', 'Confirmed', 'Same', 'Different', 'Unique', 'Before', 'After'];\n\t        }\n\t    }], [{\n\t        key: 'make',\n\t        value: function make(data, rules) {\n\t            var customMessages = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\t\n\t            return new Validator(data, rules, customMessages);\n\t        }\n\t    }]);\n\t\n\t    return Validator;\n\t}();\n\t\n\texports.default = Validator;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = {\n\t    'accepted': 'The :attr must be accepted.',\n\t    // 'active_url'           : 'The :attr is not a valid URL.',\n\t    'after': 'The :attr must be a date after :date.',\n\t    'alpha': 'The :attr may only contain letters.',\n\t    'alpha_dash': 'The :attr may only contain letters, numbers, and dashes.',\n\t    'alpha_num': 'The :attr may only contain letters and numbers.',\n\t    'array': 'The :attr must be an array.',\n\t    'before': 'The :attr must be a date before :date.',\n\t    'between': {\n\t        'numeric': 'The :attr must be between :min and :max.',\n\t        'file': 'The :attr must be between :min and :max kilobytes.',\n\t        'string': 'The :attr must be between :min and :max characters.',\n\t        'array': 'The :attr must have between :min and :max items.'\n\t    },\n\t    'boolean': 'The :attr field must be true or false.',\n\t    'confirmed': 'The :attr confirmation does not match.',\n\t    'date': 'The :attr is not a valid date.',\n\t    'date_format': 'The :attr does not match the format :format.',\n\t    'different': 'The :attr and :other must be different.',\n\t    'digits': 'The :attr must be :digits digits.',\n\t    'digits_between': 'The :attr must be between :min and :max digits.',\n\t    'email': 'The :attr must be a valid email address.',\n\t    'exists': 'The selected :attr is invalid.',\n\t    'filled': 'The :attr field is required.',\n\t    'image': 'The :attr must be an image.',\n\t    'in': 'The selected :attr is invalid.',\n\t    'integer': 'The :attr must be an integer.',\n\t    'ip': 'The :attr must be a valid IP address.',\n\t    'json': 'The :attr must be a valid JSON string.',\n\t    'max': {\n\t        'numeric': 'The :attr may not be greater than :max.',\n\t        'file': 'The :attr may not be greater than :max kilobytes.',\n\t        'string': 'The :attr may not be greater than :max characters.',\n\t        'array': 'The :attr may not have more than :max items.'\n\t    },\n\t    'mimes': 'The :attr must be a file of type: :values.',\n\t    'min': {\n\t        'numeric': 'The :attr must be at least :min.',\n\t        'file': 'The :attr must be at least :min kilobytes.',\n\t        'string': 'The :attr must be at least :min characters.',\n\t        'array': 'The :attr must have at least :min items.'\n\t    },\n\t    'not_in': 'The selected :attr is invalid.',\n\t    'numeric': 'The :attr must be a number.',\n\t    'regex': 'The :attr format is invalid.',\n\t    'required': 'The :attr field is required.',\n\t    'required_if': 'The :attr field is required when :other is :value.',\n\t    'required_unless': 'The :attr field is required unless :other is in :values.',\n\t    'required_with': 'The :attr field is required when :values is present.',\n\t    'required_with_all': 'The :attr field is required when :values is present.',\n\t    'required_without': 'The :attr field is required when :values is not present.',\n\t    'required_without_all': 'The :attr field is required when none of :values are present.',\n\t    'same': 'The :attr and :other must match.',\n\t    'size': {\n\t        'numeric': 'The :attr must be :size.',\n\t        'file': 'The :attr must be :size kilobytes.',\n\t        'string': 'The :attr must be :size characters.',\n\t        'array': 'The :attr must contain :size items.'\n\t    },\n\t    'string': 'The :attr must be a string.',\n\t    // 'timezone'             : 'The :attr must be a valid zone.',\n\t    // 'unique'               : 'The :attr has already been taken.',\n\t    'url': 'The :attr format is invalid.'\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** Validator.umd.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cfafcd5acc46fb1e00f5\n **/","import Messages from './Messages'\r\n\r\nexport default class Validator {\r\n    constructor(data, rules, customMessages = []) {\r\n        this.data = data\r\n        this.rules = this.parseRules(rules)\r\n        this.failedRules = []\r\n        this.errors = null\r\n        this.customMessages = customMessages\r\n    }\r\n\r\n    get dateRules() {\r\n        return ['Before', 'After', 'DateBetween']\r\n    }\r\n\r\n    get sizeRules() {\r\n        return ['Size', 'Between', 'Min', 'Max']\r\n    }\r\n\r\n    get numericRules() {\r\n        return ['Numeric', 'Integer']\r\n    }\r\n\r\n    get implicitRules() {\r\n        return [\r\n            'Required', 'Filled', 'RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll',\r\n            'RequiredIf', 'RequiredUnless', 'Accepted', 'Present',\r\n        ]\r\n    }\r\n\r\n    get dependentRules() {\r\n        return [\r\n            'RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll',\r\n            'RequiredIf', 'RequiredUnless', 'Confirmed', 'Same', 'Different', 'Unique',\r\n            'Before', 'After',\r\n        ]\r\n    }\r\n\r\n    static make(data, rules, customMessages = []) {\r\n        return new Validator(data, rules, customMessages)\r\n    }\r\n\r\n    isImplicit(rule) {\r\n        return this.implicitRules.indexOf(rule) > -1\r\n    }\r\n\r\n    hasData(name) {\r\n        return typeof(this.data[name]) !== 'undefined'\r\n    }\r\n\r\n    hasRule(name, rules) {\r\n        return this.getRule(name, rules) !== null\r\n    }\r\n\r\n    getRule(name, rulesToCheck) {\r\n        let a = this.rules.filter(function(item) {\r\n            return item.name === name\r\n        })\r\n\r\n        if (a.length === 0) {\r\n            return null\r\n        } else {\r\n            a = a[0]\r\n        }\r\n\r\n        if (! Array.isArray(rulesToCheck)) {\r\n            rulesToCheck = [rulesToCheck]\r\n        }\r\n\r\n        let b = a.rules.filter(function(rule) {\r\n            return rulesToCheck.indexOf(rule.name) >= 0\r\n        })\r\n\r\n        return b.length === 0 ? null : [ b[0].name, b[0].params ]\r\n    }\r\n\r\n    requireParameterCount(count, params, rule) {\r\n        if (params.length < count) {\r\n            throw new Error('Validation rule '+rule+' requires at least '+count+' parameters')\r\n        }\r\n    }\r\n\r\n    parseRules(rules) {\r\n        let self = this\r\n        let arr = []\r\n\r\n        rules.forEach(function(item) {\r\n            arr.push({\r\n                name: item.name,\r\n                rules: self.parseItemRules(item.rules)\r\n            })\r\n        })\r\n\r\n        return arr\r\n    }\r\n\r\n    parseItemRules(rule) {\r\n        let self = this\r\n        let arr = []\r\n\r\n        rule.split('|').forEach(function(ruleAndArgs) {\r\n            if (ruleAndArgs.trim()) {\r\n                let args = ruleAndArgs.split(':')\r\n                arr.push({\r\n                    name: self.titleCase(args[0], '_'),\r\n                    params: args[1] ? args[1].split(',') : []\r\n                })\r\n            }\r\n        })\r\n\r\n        return arr\r\n    }\r\n\r\n    titleCase(str, delimiter) {\r\n        delimiter = delimiter || ' '\r\n        return str.split(delimiter).map(function(item) {\r\n            return item[0].toUpperCase() + item.slice(1).toLowerCase()\r\n        }).join('')\r\n    }\r\n\r\n    snakeCase(str, delimiter) {\r\n        delimiter = delimiter || '_'\r\n        return str.replace(/(.)(?=[A-Z])/ug, '$1'+delimiter).toLowerCase()\r\n    }\r\n\r\n    getValue(name) {\r\n        if (typeof this.data[name] === 'undefined') {\r\n            return ''\r\n        }\r\n\r\n        return this.data[name]\r\n    }\r\n\r\n    passes() {\r\n        let self = this\r\n        this.errors = []\r\n        this.failedRules = []\r\n\r\n        this.rules.forEach(function(item) {\r\n            let name = item.name.toLowerCase()\r\n            item.rules.forEach(function(rule) {\r\n                self.validate(name, rule)\r\n            })\r\n        })\r\n\r\n        return this.errors.length === 0\r\n    }\r\n\r\n    fails() {\r\n        return !this.passes()\r\n    }\r\n\r\n    valid() {\r\n        if (! this.errors) {\r\n            this.passes()\r\n        }\r\n\r\n        let arr = []\r\n        for (key in this.data) {\r\n            if (! this.hasError(key)) {\r\n                arr.push(key)\r\n            }\r\n        }\r\n\r\n        return arr\r\n    }\r\n\r\n    invalid() {\r\n        if (! this.errors) {\r\n            this.passes()\r\n        }\r\n\r\n        let arr = []\r\n        for (key in this.data) {\r\n            if (this.hasError(key)) {\r\n                arr.push(key)\r\n            }\r\n        }\r\n\r\n        return arr\r\n    }\r\n\r\n    getErrorMsg(name, rule) {\r\n        let msg = this.getMessage(name, rule)\r\n\r\n        return this.doReplacements(msg, name, rule)\r\n    }\r\n\r\n    getMessage(name, rule) {\r\n        let key = this.snakeCase(rule.name)\r\n        let msg = this.customMessages[name + '.' + key]\r\n\r\n        if (typeof(msg) !== 'undefined') {\r\n            return msg\r\n        }\r\n\r\n        msg = Messages[key]\r\n        // message might has sub-rule\r\n        if (typeof(msg) === 'object') {\r\n            let type = this.getDataType(name)\r\n            msg = Messages[key][type]\r\n        }\r\n\r\n        return typeof(msg) === 'undefined' ? '' : msg\r\n    }\r\n\r\n    getDataType(name) {\r\n        if (this.hasRule(name, this.numericRules)) {\r\n            return 'numeric'\r\n        } else if (this.hasRule(name, ['Array'])) {\r\n            return 'array'\r\n        }\r\n        /* SKIP file type */\r\n\r\n        return 'string'\r\n    }\r\n\r\n    doReplacements(msg, name, rule) {\r\n        if (msg.trim() === '') {\r\n            return ''\r\n        }\r\n\r\n        msg = msg.replace(':ATTR', name.toUpperCase())\r\n            .replace(':Attr', this.titleCase(name))\r\n            .replace(':attr', name)\r\n\r\n        // call replacer\r\n        let replacer = this['replace' + rule.name]\r\n        if (typeof replacer === 'function') {\r\n            msg = replacer.apply(this, [msg, name, rule.name, rule.params])\r\n        }\r\n\r\n        return msg\r\n    }\r\n\r\n    hasError(name = null) {\r\n        if (name === null) {\r\n            return this.errors.length > 0\r\n        }\r\n\r\n        let errors = this.errors.filter(function(error) {\r\n            return error.name === name.toLowerCase()\r\n        })\r\n\r\n        return errors.length > 0\r\n    }\r\n\r\n    getErrors() {\r\n        return this.errors\r\n    }\r\n\r\n    validate(name, rule) {\r\n        let value = this.getValue(name)\r\n        let method = this['validate' + rule.name]\r\n\r\n        if (typeof method !== 'function') {\r\n            console.error('\"' + rule.name + '\" validation rule does not exist!')\r\n        }\r\n\r\n        // return method.apply(this, [name, value, rule.params])\r\n        if (! method.apply(this, [name, value, rule.params])) {\r\n            this.addFailure(name, rule)\r\n        }\r\n    }\r\n/*\r\n    isValidatable(rule, name, value) {\r\n        return this.presentOrRuleIsImplicit(rule, name, value) &&\r\n               this.passesOptionalCheck(name) &&\r\n               this.hasNotFailedPreviousRuleIfPresenceRule(rule, name)\r\n    }\r\n\r\n    presentOrRuleIsImplicit(rule, name, value) {\r\n        return this.validateRequired(name, value) || this.isImplicit(rule)\r\n    }\r\n\r\n    passesOptionalCheck(name) {\r\n        return true\r\n    }\r\n\r\n    hasNotFailedPreviousRuleIfPresenceRule(rule, name) {\r\n        return true\r\n    }\r\n*/\r\n\r\n    addFailure(name, rule) {\r\n        this.addError(name, rule)\r\n\r\n        this.failedRules.push({\r\n            name: name,\r\n            rule: rule.name,\r\n            params: rule.params\r\n        })\r\n    }\r\n\r\n    addError(name, rule) {\r\n        let msg = this.getMessage(name, rule)\r\n\r\n        msg = this.doReplacements(msg, name, rule)\r\n\r\n        this.errors.push({\r\n            name: name,\r\n            rule: rule.name,\r\n            message: msg\r\n        })\r\n    }\r\n\r\n    /** Validation Rules **/\r\n\r\n    validateSometimes() {\r\n        return true\r\n    }\r\n\r\n    validateBail() {\r\n        return true\r\n    }\r\n\r\n    shouldStopValidating(name) {\r\n        if (! this.hasRule(name, ['Bail'])) {\r\n            return false\r\n        }\r\n\r\n        return this.hasError(name)\r\n    }\r\n\r\n    validateRequired(name, value, params) {\r\n        if (value === null) {\r\n            return false\r\n        } else if (typeof(value) === 'string' && value.trim() === '') {\r\n            return false\r\n        } else if (Array.isArray(value) && value.length < 1) {\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    validatePresent(name, value, params) {\r\n        return typeof(this.data[name]) !== 'undefined'\r\n    }\r\n\r\n    validateFilled(name, value) {\r\n        if (this.hasData(name)) {\r\n            return this.validateRequired(name, value)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    anyFailingRequired(names) {\r\n        let self = this\r\n        let result = false\r\n\r\n        names.forEach(function(name) {\r\n            if (! self.validateRequired(name, self.getValue(name))) {\r\n                result = true\r\n                return\r\n            }\r\n        })\r\n\r\n        return result\r\n    }\r\n\r\n    allFailingRequired(names) {\r\n        let self = this\r\n        let result = true\r\n\r\n        names.forEach(function(name) {\r\n            if (self.validateRequired(name, self.getValue(name))) {\r\n                result = false\r\n                return\r\n            }\r\n        })\r\n\r\n        return result\r\n    }\r\n\r\n    validateRequiredWith(name, value, params) {\r\n        if (! this.allFailingRequired(params)) {\r\n            return this.validateRequired(name, value)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    validateRequiredWithAll(name, value, params) {\r\n        if (! this.anyFailingRequired(params)) {\r\n            return this.validateRequired(name, value)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    validateRequiredWithout(name, value, params) {\r\n        if (this.anyFailingRequired(params)) {\r\n            return this.validateRequired(name, value)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    validateRequiredWithoutAll(name, value, params) {\r\n        if (this.allFailingRequired(params)) {\r\n            return this.validateRequired(name, value)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    validateRequiredIf(name, value, params) {\r\n        this.requireParameterCount(2, params, 'required_if')\r\n\r\n        let data = this.getValue(params[0])\r\n        if (typeof(data) === 'boolean') {\r\n            data = data.toString()\r\n        }\r\n\r\n        let values = params.slice(1)\r\n\r\n        if (values.indexOf(data) >= 0) {\r\n            return this.validateRequired(name, value)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    validateRequiredUnless(name, value, params) {\r\n        this.requireParameterCount(2, params, 'required_unless')\r\n\r\n        let data = this.getValue(params[0])\r\n\r\n        let values = params.slice(1)\r\n\r\n        if (values.indexOf(data) < 0) {\r\n            return this.validateRequired(name, value)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    getPresentCount(names) {\r\n        let self = this\r\n        let count = 0\r\n\r\n        names.forEach(function(name) {\r\n            if (typeof(self.data[name]) !== 'undefined') {\r\n                count++\r\n            }\r\n        })\r\n\r\n        return count\r\n    }\r\n\r\n    validateMatch(name, value, params) {\r\n        if (!(params instanceof Array)) {\r\n            params = [params];\r\n        }\r\n\r\n        if (!(value instanceof Array)) {\r\n            value = [value]\r\n        }\r\n\r\n        var re = params[0]\r\n\r\n        if (!(re instanceof RegExp)) {\r\n            re = re.split('/')\r\n            re = new RegExp(re[1], re[2])\r\n        }\r\n\r\n        return re.test(value)\r\n    }\r\n\r\n    validateRegex(name, value, params) {\r\n        return this.validateMatch(name, value, params);\r\n    }\r\n\r\n    validateAccepted(name, value) {\r\n        var acceptable = ['yes', 'on', '1', 1, true, 'true']\r\n\r\n        return this.validateRequired(name, value) && (acceptable.indexOf(value) >= 0)\r\n    }\r\n\r\n    validateArray(name, value) {\r\n        if (typeof(this.data[name]) === 'undefined') {\r\n            return true\r\n        }\r\n\r\n        return value === null || Array.isArray(value)\r\n    }\r\n\r\n    validateConfirmed(name, value) {\r\n        return this.validateSame(name, value, [name+'_confirmation'])\r\n    }\r\n\r\n    validateSame(name, value, params) {\r\n        this.requireParameterCount(1, params, 'same')\r\n\r\n        var other = this.data[params[0]]\r\n\r\n        return typeof(other) !== 'undefined' && value === other\r\n    }\r\n\r\n    validateDifferent(name, value, params) {\r\n        this.requireParameterCount(1, params, 'different')\r\n\r\n        var other = this.data[params[0]]\r\n\r\n        return typeof(other) !== 'undefined' && value !== other\r\n    }\r\n\r\n    validateDigits(name, value, params) {\r\n        this.requireParameterCount(1, params, 'digits')\r\n\r\n        return this.validateNumeric(name, value)\r\n            && value.toString().length == params[0]\r\n    }\r\n\r\n    validateDigitsBetween(name, value, params) {\r\n        this.requireParameterCount(2, params, 'digits_between')\r\n\r\n        var len = value.toString().length\r\n\r\n        return this.validateNumeric(name, value)\r\n            && len >= params[0] && len <= params[1]\r\n    }\r\n\r\n    validateSize(name, value, params) {\r\n        this.requireParameterCount(1, params, 'size')\r\n\r\n        return this.getSize(name, value) == params[0]\r\n    }\r\n\r\n    validateBetween(name, value, params) {\r\n        this.requireParameterCount(2, params, 'between')\r\n\r\n        var size = this.getSize(name, value)\r\n\r\n        return size >= params[0] && size <= params[1]\r\n    }\r\n\r\n    validateMin(name, value, params) {\r\n        this.requireParameterCount(1, params, 'min')\r\n\r\n        return this.getSize(name, value) >= params[0]\r\n    }\r\n\r\n    validateMax(name, value, params) {\r\n        this.requireParameterCount(1, params, 'max')\r\n\r\n        return this.getSize(name, value) <= params[0]\r\n    }\r\n\r\n    getSize(name, value) {\r\n        var hasNumeric = this.hasRule(name, this.numericRules)\r\n\r\n        if (hasNumeric && !isNaN(parseFloat(value))) {\r\n            return parseFloat(value)\r\n        }\r\n\r\n        // for array and string\r\n        return value.length\r\n    }\r\n\r\n    validateIn(name, value, params) {\r\n        if (Array.isArray(value) && this.hasRule(name, 'Array')) {\r\n            let arr = this.arrayDiff(value, params)\r\n            return arr.length === 0\r\n        }\r\n\r\n        return params.indexOf(value) >= 0\r\n    }\r\n\r\n    arrayDiff(arr1, arr2) {\r\n        let diff = []\r\n        arr1.forEach(function(item) {\r\n            if (arr2.indexOf(item) < 0) {\r\n                diff.push(item)\r\n            }\r\n        })\r\n        return diff\r\n    }\r\n\r\n    validateNotIn(name, value, params) {\r\n        this.requireParameterCount(1, params, 'not_in')\r\n\r\n        return ! this.validateIn(name, value, params)\r\n    }\r\n\r\n    validateNumeric(name, value) {\r\n        return this.validateMatch(name, value, /^-?\\d+(\\.\\d*)?$/)\r\n    }\r\n\r\n    validateInteger(name, value) {\r\n        return this.validateMatch(name, value, /^-?\\d+$/)\r\n    }\r\n\r\n    validateString(name, value) {\r\n        if (! this.hasData(name)) {\r\n            return true\r\n        }\r\n\r\n        return value === null || typeof(value) === 'string'\r\n    }\r\n\r\n    validateEmail(name, value) {\r\n        return this.validateMatch(name, value, /^[A-Z0-9._%+\\-]+@[A-Z0-9.\\-]+\\.[A-Z]{2,4}$/i)\r\n    }\r\n\r\n    validateIp(name, value) {\r\n        var segments = value.split('.')\r\n\r\n        if (segments.length === 4 &&\r\n                this.validateBetween(name, segments[0], [1, 255]) &&\r\n                this.validateBetween(name, segments[1], [0, 255]) &&\r\n                this.validateBetween(name, segments[2], [0, 255]) &&\r\n                this.validateBetween(name, segments[3], [1, 255])\r\n            ) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    validateUrl(name, value) {\r\n        return this.validateMatch(name, value, /^(https?|ftp):\\/\\/[^\\s\\/$.?#].[^\\s]*$/i)\r\n    }\r\n\r\n    validateAlpha(name, value) {\r\n        return this.validateMatch(name, value, /^([a-z])+$/i)\r\n    }\r\n\r\n    validateAlphaNum(name, value) {\r\n        return this.validateMatch(name, value, /^([a-z0-9])+$/i)\r\n    }\r\n\r\n    validateAlphaDash(name, value) {\r\n        return this.validateMatch(name, value, /^([a-z0-9_\\-])+$/i)\r\n    }\r\n\r\n    validateBefore(name, value, params) {\r\n        this.requireParameterCount(1, params, 'before')\r\n\r\n        if (typeof(value) !== 'string' && typeof(value) !== 'number' && !(value instanceof Date)) {\r\n            return false\r\n        }\r\n\r\n        let date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0]\r\n\r\n        if( ! this.validateDate(name, date)) {\r\n            console.error(params[0] + ' does not appear to be a date.')\r\n            return false\r\n        }\r\n\r\n        return (Date.parse(value) < Date.parse(date))\r\n    }\r\n\r\n    validateAfter(name, value, params) {\r\n        this.requireParameterCount(1, params, 'after')\r\n\r\n        if (typeof(value) !== 'string' && typeof(value) !== 'number' && !(value instanceof Date)) {\r\n            return false\r\n        }\r\n\r\n        let date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0]\r\n\r\n        if( ! this.validateDate(name, date)) {\r\n            console.error(params[0] + ' does not appear to be a date.')\r\n            return false\r\n        }\r\n\r\n        return (Date.parse(value) > Date.parse(date))\r\n    }\r\n\r\n    validateDate(name, value) {\r\n        if (value instanceof Date) {\r\n            return true\r\n        }\r\n\r\n        if (typeof(value) !== 'string' && typeof(value) !== 'number') {\r\n            return false\r\n        }\r\n\r\n        return ! isNaN(Date.parse(value))\r\n    }\r\n\r\n    validateBoolean(name, value) {\r\n        if (! this.hasData(name)) {\r\n            return true\r\n        }\r\n\r\n        let acceptable = [true, false, 0, 1, '0', '1']\r\n\r\n        return value === null || acceptable.indexOf(value) >= 0\r\n    }\r\n\r\n    validateJson(name, value) {\r\n        try {\r\n            JSON.parse(value)\r\n            return true\r\n        } catch(err) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    /*---- Replacers ----*/\r\n    strReplace(find, replace, string) {\r\n        if (! Array.isArray(find)) {\r\n            find = [find]\r\n        }\r\n        if (! Array.isArray(replace)) {\r\n            replace = [replace]\r\n        }\r\n        for (var i = 0; i < find.length; i++) {\r\n            string = string.replace(find[i], replace[i])\r\n        }\r\n\r\n        return string\r\n    }\r\n\r\n    getDisplayableValue(name, value) {\r\n        return value\r\n    }\r\n\r\n    getDataNameList(values) {\r\n        let names = []\r\n\r\n        for (var key in values) {\r\n            names.push({\r\n                key : this.getDataName(values[key])\r\n            })\r\n        }\r\n\r\n        return names\r\n    }\r\n\r\n    getDataName(name) {\r\n        return name\r\n    }\r\n\r\n    replaceBetween(msg, name, rule, params) {\r\n        return this.strReplace([':min', ':max'], params, msg)\r\n    }\r\n\r\n    replaceDifferent(msg, name, rule, params) {\r\n        return this.replaceSame(msg, name, rule, params)\r\n    }\r\n\r\n    replaceDigits(msg, name, rule, params) {\r\n        return this.strReplace(':digits', params[0], msg)\r\n    }\r\n\r\n    replaceDigitsBetween(msg, name, rule, params) {\r\n        return this.replaceBetween(msg, name, rule, params)\r\n    }\r\n\r\n    replaceMin(msg, name, rule, params) {\r\n      return this.strReplace(':min', params[0], msg)\r\n    }\r\n\r\n    replaceMax(msg, name, rule, params) {\r\n        return this.strReplace(':max', params[0], msg)\r\n    }\r\n\r\n    replaceIn(msg, name, rule, params) {\r\n        let self = this\r\n        params = params.map(function(value) {\r\n            return self.getDisplayableValue(name, value)\r\n        })\r\n\r\n        return this.strReplace(':values', params.join(', '), msg)\r\n    }\r\n\r\n    replaceNotIn(msg, name, rule, params) {\r\n        return this.replaceIn(msg, name, rule, params)\r\n    }\r\n\r\n    // replaceInArray()\r\n    // replaceMimes()\r\n\r\n    replaceRequiredWith(msg, name, rule, params) {\r\n        params = this.getDataNameList(params)\r\n\r\n        return this.strReplace(':values', params.join(' / '), msg)\r\n    }\r\n\r\n    replaceRequiredWithAll(msg, name, rule, params) {\r\n        return this.replaceRequiredWith(msg, name, rule, params)\r\n    }\r\n\r\n    replaceRequiredWithout(msg, name, rule, params) {\r\n        return this.replaceRequiredWith(msg, name, rule, params)\r\n    }\r\n\r\n    replaceRequiredWithoutAll(msg, name, rule, params) {\r\n        return this.replaceRequiredWith(msg, name, rule, params)\r\n    }\r\n\r\n    replaceRequiredIf(msg, name, rule, params) {\r\n        params[1] = this.getDisplayableValue(params[0], this.data[params[0]])\r\n\r\n        params[0] = this.getDataName(params[0])\r\n\r\n        return this.strReplace([':other', ':value'], params, msg)\r\n    }\r\n\r\n    replaceRequiredUnless(msg, name, rule, params) {\r\n        let other = this.getDataName(params.shift())\r\n\r\n        return this.strReplace([':other', ':values'], [other, params.join(', ')], msg)\r\n    }\r\n\r\n    replaceSame(msg, name, rule, params) {\r\n        return this.strReplace(':other', name, msg)\r\n    }\r\n\r\n    replaceSize(msg, name, rule, params) {\r\n        return this.strReplace(':size', params[0], msg)\r\n    }\r\n\r\n    replaceBefore(msg, name, rule, params) {\r\n        if (isNaN(Date.parse(params[0]))) {\r\n            return this.strReplace(':date', this.getDataName(params[0]), msg)\r\n        }\r\n\r\n        return this.strReplace(':date', params[0], msg)\r\n    }\r\n\r\n    replaceAfter(msg, name, rule, params) {\r\n        return this.replaceBefore(msg, name, rule, params)\r\n    }\r\n\r\n    dependsOnOtherFields(rule) {\r\n        return this.dependentRules.indexOf(rule)\r\n    }\r\n}\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Validator.js\n **/","export default {\r\n    'accepted'             : 'The :attr must be accepted.',\r\n    // 'active_url'           : 'The :attr is not a valid URL.',\r\n    'after'                : 'The :attr must be a date after :date.',\r\n    'alpha'                : 'The :attr may only contain letters.',\r\n    'alpha_dash'           : 'The :attr may only contain letters, numbers, and dashes.',\r\n    'alpha_num'            : 'The :attr may only contain letters and numbers.',\r\n    'array'                : 'The :attr must be an array.',\r\n    'before'               : 'The :attr must be a date before :date.',\r\n    'between'              : {\r\n        'numeric' : 'The :attr must be between :min and :max.',\r\n        'file'    : 'The :attr must be between :min and :max kilobytes.',\r\n        'string'  : 'The :attr must be between :min and :max characters.',\r\n        'array'   : 'The :attr must have between :min and :max items.',\r\n    },\r\n    'boolean'              : 'The :attr field must be true or false.',\r\n    'confirmed'            : 'The :attr confirmation does not match.',\r\n    'date'                 : 'The :attr is not a valid date.',\r\n    'date_format'          : 'The :attr does not match the format :format.',\r\n    'different'            : 'The :attr and :other must be different.',\r\n    'digits'               : 'The :attr must be :digits digits.',\r\n    'digits_between'       : 'The :attr must be between :min and :max digits.',\r\n    'email'                : 'The :attr must be a valid email address.',\r\n    'exists'               : 'The selected :attr is invalid.',\r\n    'filled'               : 'The :attr field is required.',\r\n    'image'                : 'The :attr must be an image.',\r\n    'in'                   : 'The selected :attr is invalid.',\r\n    'integer'              : 'The :attr must be an integer.',\r\n    'ip'                   : 'The :attr must be a valid IP address.',\r\n    'json'                 : 'The :attr must be a valid JSON string.',\r\n    'max'                  : {\r\n        'numeric' : 'The :attr may not be greater than :max.',\r\n        'file'    : 'The :attr may not be greater than :max kilobytes.',\r\n        'string'  : 'The :attr may not be greater than :max characters.',\r\n        'array'   : 'The :attr may not have more than :max items.',\r\n    },\r\n    'mimes'                : 'The :attr must be a file of type: :values.',\r\n    'min'                  : {\r\n        'numeric' : 'The :attr must be at least :min.',\r\n        'file'    : 'The :attr must be at least :min kilobytes.',\r\n        'string'  : 'The :attr must be at least :min characters.',\r\n        'array'   : 'The :attr must have at least :min items.',\r\n    },\r\n    'not_in'               : 'The selected :attr is invalid.',\r\n    'numeric'              : 'The :attr must be a number.',\r\n    'regex'                : 'The :attr format is invalid.',\r\n    'required'             : 'The :attr field is required.',\r\n    'required_if'          : 'The :attr field is required when :other is :value.',\r\n    'required_unless'      : 'The :attr field is required unless :other is in :values.',\r\n    'required_with'        : 'The :attr field is required when :values is present.',\r\n    'required_with_all'    : 'The :attr field is required when :values is present.',\r\n    'required_without'     : 'The :attr field is required when :values is not present.',\r\n    'required_without_all' : 'The :attr field is required when none of :values are present.',\r\n    'same'                 : 'The :attr and :other must match.',\r\n    'size'                 : {\r\n        'numeric' : 'The :attr must be :size.',\r\n        'file'    : 'The :attr must be :size kilobytes.',\r\n        'string'  : 'The :attr must be :size characters.',\r\n        'array'   : 'The :attr must contain :size items.',\r\n    },\r\n    'string'               : 'The :attr must be a string.',\r\n    // 'timezone'             : 'The :attr must be a valid zone.',\r\n    // 'unique'               : 'The :attr has already been taken.',\r\n    'url'                  : 'The :attr format is invalid.',\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Messages.js\n **/"],"sourceRoot":""}