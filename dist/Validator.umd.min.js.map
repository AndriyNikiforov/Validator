{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///Validator.umd.min.js","webpack:///webpack/bootstrap 6250e570d5abc8cd1b60","webpack:///./src/Validator.js","webpack:///./src/Messages.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_typeof","Symbol","iterator","constructor","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_Messages","_Messages2","Validator","data","rules","customMessages","arguments","undefined","customNames","parseRules","failedRules","errors","customValues","getOwnPropertyNames","rule","implicitRules","indexOf","name","getRule","rulesToCheck","a","filter","item","Array","isArray","b","params","count","Error","self","arr","forEach","push","parseItemRules","split","ruleAndArgs","trim","args","titleCase","str","delimiter","map","toUpperCase","slice","toLowerCase","join","replace","validate","passes","hasError","error","msg","getMessage","doReplacements","snakeCase","type","getDataType","hasRule","numericRules","getDataName","replacer","apply","getValue","method","console","addFailure","addError","message","hasData","validateRequired","names","result","allFailingRequired","anyFailingRequired","requireParameterCount","toString","values","re","RegExp","test","validateMatch","acceptable","validateSame","other","validateNumeric","len","getSize","size","hasNumeric","isNaN","parseFloat","arrayDiff","arr1","arr2","diff","validateIn","segments","validateBetween","Date","date","validateDate","parse","JSON","err","find","string","strReplace","replaceSame","replaceBetween","getDisplayableValue","replaceIn","getDataNameList","replaceRequiredWith","shift","replaceBefore","dependentRules","get","accepted","after","alpha","alpha_dash","alpha_num","array","before","between","numeric","file","boolean","confirmed","date_format","different","digits","digits_between","email","exists","filled","image","in","integer","ip","json","max","mimes","min","not_in","regex","required","required_if","required_unless","required_with","required_with_all","required_without","required_without_all","same","url"],"mappings":"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","file":"Validator.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Validator\"] = factory();\n\telse\n\t\troot[\"Validator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Validator\"] = factory();\n\telse\n\t\troot[\"Validator\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Messages = __webpack_require__(1);\n\t\n\tvar _Messages2 = _interopRequireDefault(_Messages);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Validator = function () {\n\t    function Validator(data, rules) {\n\t        var customMessages = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t        var customNames = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\t\n\t        _classCallCheck(this, Validator);\n\t\n\t        this.data = data;\n\t        this.rules = this.parseRules(rules);\n\t        this.failedRules = [];\n\t        this.errors = null;\n\t        this.customMessages = customMessages;\n\t        this.customNames = customNames;\n\t        this.customValues = {};\n\t    }\n\t\n\t    _createClass(Validator, [{\n\t        key: 'isEmptyObject',\n\t        value: function isEmptyObject(obj) {\n\t            return Object.getOwnPropertyNames(obj).length === 0;\n\t        }\n\t    }, {\n\t        key: 'isImplicit',\n\t        value: function isImplicit(rule) {\n\t            return this.implicitRules.indexOf(rule) > -1;\n\t        }\n\t    }, {\n\t        key: 'hasData',\n\t        value: function hasData(name) {\n\t            return typeof this.data[name] !== 'undefined';\n\t        }\n\t    }, {\n\t        key: 'hasRule',\n\t        value: function hasRule(name, rules) {\n\t            return this.getRule(name, rules) !== null;\n\t        }\n\t    }, {\n\t        key: 'getRule',\n\t        value: function getRule(name, rulesToCheck) {\n\t            var a = this.rules.filter(function (item) {\n\t                return item.name === name;\n\t            });\n\t\n\t            if (a.length === 0) {\n\t                return null;\n\t            } else {\n\t                a = a[0];\n\t            }\n\t\n\t            if (!Array.isArray(rulesToCheck)) {\n\t                rulesToCheck = [rulesToCheck];\n\t            }\n\t\n\t            var b = a.rules.filter(function (rule) {\n\t                return rulesToCheck.indexOf(rule.name) >= 0;\n\t            });\n\t\n\t            return b.length === 0 ? null : [b[0].name, b[0].params];\n\t        }\n\t    }, {\n\t        key: 'requireParameterCount',\n\t        value: function requireParameterCount(count, params, rule) {\n\t            if (params.length < count) {\n\t                throw new Error('Validation rule ' + rule + ' requires at least ' + count + ' parameters');\n\t            }\n\t        }\n\t    }, {\n\t        key: 'parseRules',\n\t        value: function parseRules(rules) {\n\t            var self = this;\n\t            var arr = [];\n\t\n\t            rules.forEach(function (item) {\n\t                arr.push({\n\t                    name: item.name,\n\t                    rules: self.parseItemRules(item.rules)\n\t                });\n\t            });\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'parseItemRules',\n\t        value: function parseItemRules(rule) {\n\t            var self = this;\n\t            var arr = [];\n\t\n\t            rule.split('|').forEach(function (ruleAndArgs) {\n\t                if (ruleAndArgs.trim()) {\n\t                    var args = ruleAndArgs.split(':');\n\t                    arr.push({\n\t                        name: self.titleCase(args[0], '_'),\n\t                        params: args[1] ? args[1].split(',') : []\n\t                    });\n\t                }\n\t            });\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'titleCase',\n\t        value: function titleCase(str, delimiter) {\n\t            delimiter = delimiter || ' ';\n\t            return str.split(delimiter).map(function (item) {\n\t                return item[0].toUpperCase() + item.slice(1).toLowerCase();\n\t            }).join('');\n\t        }\n\t    }, {\n\t        key: 'snakeCase',\n\t        value: function snakeCase(str, delimiter) {\n\t            delimiter = delimiter || '_';\n\t            return str.replace(/((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))(?=[A-Z])/g, '$1' + delimiter).toLowerCase();\n\t        }\n\t    }, {\n\t        key: 'getValue',\n\t        value: function getValue(name) {\n\t            if (typeof this.data[name] === 'undefined') {\n\t                return '';\n\t            }\n\t\n\t            return this.data[name];\n\t        }\n\t    }, {\n\t        key: 'passes',\n\t        value: function passes() {\n\t            var self = this;\n\t            this.errors = [];\n\t            this.failedRules = [];\n\t\n\t            this.rules.forEach(function (item) {\n\t                var name = item.name.toLowerCase();\n\t                item.rules.forEach(function (rule) {\n\t                    self.validate(name, rule);\n\t                });\n\t            });\n\t\n\t            return this.errors.length === 0;\n\t        }\n\t    }, {\n\t        key: 'fails',\n\t        value: function fails() {\n\t            return !this.passes();\n\t        }\n\t    }, {\n\t        key: 'valid',\n\t        value: function valid() {\n\t            if (!this.errors) {\n\t                this.passes();\n\t            }\n\t\n\t            var arr = [];\n\t            for (var key in this.data) {\n\t                if (!this.hasError(key)) {\n\t                    arr.push(key);\n\t                }\n\t            }\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'invalid',\n\t        value: function invalid() {\n\t            if (!this.errors) {\n\t                this.passes();\n\t            }\n\t\n\t            var arr = [];\n\t            this.errors.forEach(function (error) {\n\t                if (arr.indexOf(error.name) < 0) {\n\t                    arr.push(error.name);\n\t                }\n\t            });\n\t\n\t            return arr;\n\t        }\n\t    }, {\n\t        key: 'getErrorMsg',\n\t        value: function getErrorMsg(name, rule) {\n\t            var msg = this.getMessage(name, rule);\n\t\n\t            return this.doReplacements(msg, name, rule);\n\t        }\n\t    }, {\n\t        key: 'getMessage',\n\t        value: function getMessage(name, rule) {\n\t            var key = this.snakeCase(rule.name);\n\t            var msg = this.customMessages[name + '.' + key];\n\t\n\t            if (typeof msg !== 'undefined') {\n\t                return msg;\n\t            }\n\t\n\t            msg = _Messages2.default[key];\n\t            // message might has sub-rule\n\t            if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {\n\t                var type = this.getDataType(name);\n\t                msg = _Messages2.default[key][type];\n\t            }\n\t\n\t            return typeof msg === 'undefined' ? '' : msg;\n\t        }\n\t    }, {\n\t        key: 'getDataType',\n\t        value: function getDataType(name) {\n\t            if (this.hasRule(name, this.numericRules)) {\n\t                return 'numeric';\n\t            } else if (this.hasRule(name, ['Array'])) {\n\t                return 'array';\n\t            }\n\t            /* SKIP file type */\n\t\n\t            return 'string';\n\t        }\n\t    }, {\n\t        key: 'doReplacements',\n\t        value: function doReplacements(msg, name, rule) {\n\t            if (msg.trim() === '') {\n\t                return '';\n\t            }\n\t\n\t            name = this.getDataName(name);\n\t\n\t            msg = msg.replace(':ATTR', name.toUpperCase()).replace(':Attr', this.titleCase(name)).replace(':attr', name);\n\t\n\t            // call replacer\n\t            var replacer = this['replace' + rule.name];\n\t            if (typeof replacer === 'function') {\n\t                msg = replacer.apply(this, [msg, name, rule.name, rule.params]);\n\t            }\n\t\n\t            return msg;\n\t        }\n\t    }, {\n\t        key: 'hasError',\n\t        value: function hasError() {\n\t            var name = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            if (name === null) {\n\t                return this.errors.length > 0;\n\t            }\n\t\n\t            var errors = this.errors.filter(function (error) {\n\t                return error.name === name.toLowerCase();\n\t            });\n\t\n\t            return errors.length > 0;\n\t        }\n\t    }, {\n\t        key: 'getErrors',\n\t        value: function getErrors() {\n\t            return this.errors;\n\t        }\n\t    }, {\n\t        key: 'validate',\n\t        value: function validate(name, rule) {\n\t            var value = this.getValue(name);\n\t            var method = this['validate' + rule.name];\n\t\n\t            if (typeof method !== 'function') {\n\t                console.error('\"' + rule.name + '\" validation rule does not exist!');\n\t            }\n\t\n\t            // return method.apply(this, [name, value, rule.params])\n\t            if (!method.apply(this, [name, value, rule.params])) {\n\t                this.addFailure(name, rule);\n\t            }\n\t        }\n\t        /*\n\t            isValidatable(rule, name, value) {\n\t                return this.presentOrRuleIsImplicit(rule, name, value) &&\n\t                       this.passesOptionalCheck(name) &&\n\t                       this.hasNotFailedPreviousRuleIfPresenceRule(rule, name)\n\t            }\n\t        \n\t            presentOrRuleIsImplicit(rule, name, value) {\n\t                return this.validateRequired(name, value) || this.isImplicit(rule)\n\t            }\n\t        \n\t            passesOptionalCheck(name) {\n\t                return true\n\t            }\n\t        \n\t            hasNotFailedPreviousRuleIfPresenceRule(rule, name) {\n\t                return true\n\t            }\n\t        */\n\t\n\t    }, {\n\t        key: 'addFailure',\n\t        value: function addFailure(name, rule) {\n\t            this.addError(name, rule);\n\t\n\t            this.failedRules.push({\n\t                name: name,\n\t                rule: rule.name,\n\t                params: rule.params\n\t            });\n\t        }\n\t    }, {\n\t        key: 'addError',\n\t        value: function addError(name, rule) {\n\t            var msg = this.getMessage(name, rule);\n\t\n\t            msg = this.doReplacements(msg, name, rule);\n\t\n\t            this.errors.push({\n\t                name: name,\n\t                rule: rule.name,\n\t                message: msg\n\t            });\n\t        }\n\t\n\t        /** Validation Rules **/\n\t\n\t    }, {\n\t        key: 'validateSometimes',\n\t        value: function validateSometimes() {\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateBail',\n\t        value: function validateBail() {\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'shouldStopValidating',\n\t        value: function shouldStopValidating(name) {\n\t            if (!this.hasRule(name, ['Bail'])) {\n\t                return false;\n\t            }\n\t\n\t            return this.hasError(name);\n\t        }\n\t    }, {\n\t        key: 'validateRequired',\n\t        value: function validateRequired(name, value, params) {\n\t            if (value === null) {\n\t                return false;\n\t            } else if (typeof value === 'string' && value.trim() === '') {\n\t                return false;\n\t            } else if (Array.isArray(value) && value.length < 1) {\n\t                return false;\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validatePresent',\n\t        value: function validatePresent(name, value, params) {\n\t            return typeof this.data[name] !== 'undefined';\n\t        }\n\t    }, {\n\t        key: 'validateFilled',\n\t        value: function validateFilled(name, value) {\n\t            if (this.hasData(name)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'anyFailingRequired',\n\t        value: function anyFailingRequired(names) {\n\t            var self = this;\n\t            var result = false;\n\t\n\t            names.forEach(function (name) {\n\t                if (!self.validateRequired(name, self.getValue(name))) {\n\t                    result = true;\n\t                    return;\n\t                }\n\t            });\n\t\n\t            return result;\n\t        }\n\t    }, {\n\t        key: 'allFailingRequired',\n\t        value: function allFailingRequired(names) {\n\t            var self = this;\n\t            var result = true;\n\t\n\t            names.forEach(function (name) {\n\t                if (self.validateRequired(name, self.getValue(name))) {\n\t                    result = false;\n\t                    return;\n\t                }\n\t            });\n\t\n\t            return result;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWith',\n\t        value: function validateRequiredWith(name, value, params) {\n\t            if (!this.allFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWithAll',\n\t        value: function validateRequiredWithAll(name, value, params) {\n\t            if (!this.anyFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWithout',\n\t        value: function validateRequiredWithout(name, value, params) {\n\t            if (this.anyFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredWithoutAll',\n\t        value: function validateRequiredWithoutAll(name, value, params) {\n\t            if (this.allFailingRequired(params)) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredIf',\n\t        value: function validateRequiredIf(name, value, params) {\n\t            this.requireParameterCount(2, params, 'required_if');\n\t\n\t            var data = this.getValue(params[0]);\n\t            if (typeof data === 'boolean') {\n\t                data = data.toString();\n\t            }\n\t\n\t            var values = params.slice(1);\n\t\n\t            if (values.indexOf(data) >= 0) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'validateRequiredUnless',\n\t        value: function validateRequiredUnless(name, value, params) {\n\t            this.requireParameterCount(2, params, 'required_unless');\n\t\n\t            var data = this.getValue(params[0]);\n\t\n\t            var values = params.slice(1);\n\t\n\t            if (values.indexOf(data) < 0) {\n\t                return this.validateRequired(name, value);\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'getPresentCount',\n\t        value: function getPresentCount(names) {\n\t            var self = this;\n\t            var count = 0;\n\t\n\t            names.forEach(function (name) {\n\t                if (typeof self.data[name] !== 'undefined') {\n\t                    count++;\n\t                }\n\t            });\n\t\n\t            return count;\n\t        }\n\t    }, {\n\t        key: 'validateMatch',\n\t        value: function validateMatch(name, value, params) {\n\t            if (!(params instanceof Array)) {\n\t                params = [params];\n\t            }\n\t\n\t            if (!(value instanceof Array)) {\n\t                value = [value];\n\t            }\n\t\n\t            var re = params[0];\n\t\n\t            if (!(re instanceof RegExp)) {\n\t                re = re.split('/');\n\t                re = new RegExp(re[1], re[2]);\n\t            }\n\t\n\t            return re.test(value);\n\t        }\n\t    }, {\n\t        key: 'validateRegex',\n\t        value: function validateRegex(name, value, params) {\n\t            return this.validateMatch(name, value, params);\n\t        }\n\t    }, {\n\t        key: 'validateAccepted',\n\t        value: function validateAccepted(name, value) {\n\t            var acceptable = ['yes', 'on', '1', 1, true, 'true'];\n\t\n\t            return this.validateRequired(name, value) && acceptable.indexOf(value) >= 0;\n\t        }\n\t    }, {\n\t        key: 'validateArray',\n\t        value: function validateArray(name, value) {\n\t            if (typeof this.data[name] === 'undefined') {\n\t                return true;\n\t            }\n\t\n\t            return value === null || Array.isArray(value);\n\t        }\n\t    }, {\n\t        key: 'validateConfirmed',\n\t        value: function validateConfirmed(name, value) {\n\t            return this.validateSame(name, value, [name + '_confirmation']);\n\t        }\n\t    }, {\n\t        key: 'validateSame',\n\t        value: function validateSame(name, value, params) {\n\t            this.requireParameterCount(1, params, 'same');\n\t\n\t            var other = this.data[params[0]];\n\t\n\t            return typeof other !== 'undefined' && value === other;\n\t        }\n\t    }, {\n\t        key: 'validateDifferent',\n\t        value: function validateDifferent(name, value, params) {\n\t            this.requireParameterCount(1, params, 'different');\n\t\n\t            var other = this.data[params[0]];\n\t\n\t            return typeof other !== 'undefined' && value !== other;\n\t        }\n\t    }, {\n\t        key: 'validateDigits',\n\t        value: function validateDigits(name, value, params) {\n\t            this.requireParameterCount(1, params, 'digits');\n\t\n\t            return this.validateNumeric(name, value) && value.toString().length == params[0];\n\t        }\n\t    }, {\n\t        key: 'validateDigitsBetween',\n\t        value: function validateDigitsBetween(name, value, params) {\n\t            this.requireParameterCount(2, params, 'digits_between');\n\t\n\t            var len = value.toString().length;\n\t\n\t            return this.validateNumeric(name, value) && len >= params[0] && len <= params[1];\n\t        }\n\t    }, {\n\t        key: 'validateSize',\n\t        value: function validateSize(name, value, params) {\n\t            this.requireParameterCount(1, params, 'size');\n\t\n\t            return this.getSize(name, value) == params[0];\n\t        }\n\t    }, {\n\t        key: 'validateBetween',\n\t        value: function validateBetween(name, value, params) {\n\t            this.requireParameterCount(2, params, 'between');\n\t\n\t            var size = this.getSize(name, value);\n\t\n\t            return size >= params[0] && size <= params[1];\n\t        }\n\t    }, {\n\t        key: 'validateMin',\n\t        value: function validateMin(name, value, params) {\n\t            this.requireParameterCount(1, params, 'min');\n\t\n\t            return this.getSize(name, value) >= params[0];\n\t        }\n\t    }, {\n\t        key: 'validateMax',\n\t        value: function validateMax(name, value, params) {\n\t            this.requireParameterCount(1, params, 'max');\n\t\n\t            return this.getSize(name, value) <= params[0];\n\t        }\n\t    }, {\n\t        key: 'getSize',\n\t        value: function getSize(name, value) {\n\t            var hasNumeric = this.hasRule(name, this.numericRules);\n\t\n\t            if (hasNumeric && !isNaN(parseFloat(value))) {\n\t                return parseFloat(value);\n\t            }\n\t\n\t            // for array and string\n\t            return value.length;\n\t        }\n\t    }, {\n\t        key: 'validateIn',\n\t        value: function validateIn(name, value, params) {\n\t            if (Array.isArray(value) && this.hasRule(name, 'Array')) {\n\t                var arr = this.arrayDiff(value, params);\n\t                return arr.length === 0;\n\t            }\n\t\n\t            return params.indexOf(value) >= 0;\n\t        }\n\t    }, {\n\t        key: 'arrayDiff',\n\t        value: function arrayDiff(arr1, arr2) {\n\t            var diff = [];\n\t            arr1.forEach(function (item) {\n\t                if (arr2.indexOf(item) < 0) {\n\t                    diff.push(item);\n\t                }\n\t            });\n\t            return diff;\n\t        }\n\t    }, {\n\t        key: 'validateNotIn',\n\t        value: function validateNotIn(name, value, params) {\n\t            this.requireParameterCount(1, params, 'not_in');\n\t\n\t            return !this.validateIn(name, value, params);\n\t        }\n\t    }, {\n\t        key: 'validateNumeric',\n\t        value: function validateNumeric(name, value) {\n\t            return this.validateMatch(name, value, /^-?\\d+(\\.\\d*)?$/);\n\t        }\n\t    }, {\n\t        key: 'validateInteger',\n\t        value: function validateInteger(name, value) {\n\t            return this.validateMatch(name, value, /^-?\\d+$/);\n\t        }\n\t    }, {\n\t        key: 'validateString',\n\t        value: function validateString(name, value) {\n\t            if (!this.hasData(name)) {\n\t                return true;\n\t            }\n\t\n\t            return value === null || typeof value === 'string';\n\t        }\n\t    }, {\n\t        key: 'validateEmail',\n\t        value: function validateEmail(name, value) {\n\t            return this.validateMatch(name, value, /^[A-Z0-9._%+\\-]+@[A-Z0-9.\\-]+\\.[A-Z]{2,4}$/i);\n\t        }\n\t    }, {\n\t        key: 'validateIp',\n\t        value: function validateIp(name, value) {\n\t            var segments = value.split('.');\n\t\n\t            if (segments.length === 4 && this.validateBetween(name, segments[0], [1, 255]) && this.validateBetween(name, segments[1], [0, 255]) && this.validateBetween(name, segments[2], [0, 255]) && this.validateBetween(name, segments[3], [1, 255])) {\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'validateUrl',\n\t        value: function validateUrl(name, value) {\n\t            return this.validateMatch(name, value, /^(https?|ftp):\\/\\/[^\\s\\/$.?#].[^\\s]*$/i);\n\t        }\n\t    }, {\n\t        key: 'validateAlpha',\n\t        value: function validateAlpha(name, value) {\n\t            return this.validateMatch(name, value, /^([a-z])+$/i);\n\t        }\n\t    }, {\n\t        key: 'validateAlphaNum',\n\t        value: function validateAlphaNum(name, value) {\n\t            return this.validateMatch(name, value, /^([a-z0-9])+$/i);\n\t        }\n\t    }, {\n\t        key: 'validateAlphaDash',\n\t        value: function validateAlphaDash(name, value) {\n\t            return this.validateMatch(name, value, /^([a-z0-9_\\-])+$/i);\n\t        }\n\t    }, {\n\t        key: 'validateBefore',\n\t        value: function validateBefore(name, value, params) {\n\t            this.requireParameterCount(1, params, 'before');\n\t\n\t            if (typeof value !== 'string' && typeof value !== 'number' && !(value instanceof Date)) {\n\t                return false;\n\t            }\n\t\n\t            var date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0];\n\t\n\t            if (!this.validateDate(name, date)) {\n\t                console.error(params[0] + ' does not appear to be a date.');\n\t                return false;\n\t            }\n\t\n\t            return Date.parse(value) < Date.parse(date);\n\t        }\n\t    }, {\n\t        key: 'validateAfter',\n\t        value: function validateAfter(name, value, params) {\n\t            this.requireParameterCount(1, params, 'after');\n\t\n\t            if (typeof value !== 'string' && typeof value !== 'number' && !(value instanceof Date)) {\n\t                return false;\n\t            }\n\t\n\t            var date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0];\n\t\n\t            if (!this.validateDate(name, date)) {\n\t                console.error(params[0] + ' does not appear to be a date.');\n\t                return false;\n\t            }\n\t\n\t            return Date.parse(value) > Date.parse(date);\n\t        }\n\t    }, {\n\t        key: 'validateDate',\n\t        value: function validateDate(name, value) {\n\t            if (value instanceof Date) {\n\t                return true;\n\t            }\n\t\n\t            if (typeof value !== 'string' && typeof value !== 'number') {\n\t                return false;\n\t            }\n\t\n\t            return !isNaN(Date.parse(value));\n\t        }\n\t    }, {\n\t        key: 'validateBoolean',\n\t        value: function validateBoolean(name, value) {\n\t            if (!this.hasData(name)) {\n\t                return true;\n\t            }\n\t\n\t            var acceptable = [true, false, 0, 1, '0', '1'];\n\t\n\t            return value === null || acceptable.indexOf(value) >= 0;\n\t        }\n\t    }, {\n\t        key: 'validateJson',\n\t        value: function validateJson(name, value) {\n\t            try {\n\t                JSON.parse(value);\n\t                return true;\n\t            } catch (err) {\n\t                return false;\n\t            }\n\t        }\n\t\n\t        /*---- Replacers ----*/\n\t\n\t    }, {\n\t        key: 'strReplace',\n\t        value: function strReplace(find, replace, string) {\n\t            if (!Array.isArray(find)) {\n\t                find = [find];\n\t            }\n\t            if (!Array.isArray(replace)) {\n\t                replace = [replace];\n\t            }\n\t            for (var i = 0; i < find.length; i++) {\n\t                string = string.replace(find[i], replace[i]);\n\t            }\n\t\n\t            return string;\n\t        }\n\t    }, {\n\t        key: 'getDisplayableValue',\n\t        value: function getDisplayableValue(name, value) {\n\t            if (typeof this.customValues[name] !== 'undefined' && typeof this.customValues[name][value] !== 'undefined') {\n\t                return this.customValues[name][value];\n\t            }\n\t\n\t            return value;\n\t        }\n\t\n\t        // getAttributeList\n\t\n\t    }, {\n\t        key: 'getDataNameList',\n\t        value: function getDataNameList(values) {\n\t            var names = [];\n\t\n\t            for (var key in values) {\n\t                names.push({\n\t                    key: this.getDataName(values[key])\n\t                });\n\t            }\n\t\n\t            return names;\n\t        }\n\t\n\t        // getAttribute\n\t\n\t    }, {\n\t        key: 'getDataName',\n\t        value: function getDataName(name) {\n\t            if (typeof this.customNames[name] !== 'undefined') {\n\t                return this.customNames[name];\n\t            }\n\t\n\t            return this.strReplace('_', ' ', this.snakeCase(name));\n\t        }\n\t\n\t        // setAttributeNames\n\t\n\t    }, {\n\t        key: 'setCustomNames',\n\t        value: function setCustomNames(names) {\n\t            this.customNames = names;\n\t\n\t            return this;\n\t        }\n\t    }, {\n\t        key: 'addCustomNames',\n\t        value: function addCustomNames(customNames) {\n\t            for (var key in customNames) {\n\t                this.customNames[key] = customNames[key];\n\t            }\n\t\n\t            return this;\n\t        }\n\t    }, {\n\t        key: 'getCustomValues',\n\t        value: function getCustomValues() {\n\t            return this.customValues;\n\t        }\n\t    }, {\n\t        key: 'addCustomValues',\n\t        value: function addCustomValues(customValues) {\n\t            for (var key in customValues) {\n\t                this.customValues[key] = customValues[key];\n\t            }\n\t        }\n\t    }, {\n\t        key: 'setValueNames',\n\t        value: function setValueNames(values) {\n\t            this.customValues = values;\n\t\n\t            return this;\n\t        }\n\t    }, {\n\t        key: 'failed',\n\t        value: function failed() {\n\t            return this.failedRules;\n\t        }\n\t    }, {\n\t        key: 'replaceBetween',\n\t        value: function replaceBetween(msg, name, rule, params) {\n\t            return this.strReplace([':min', ':max'], params, msg);\n\t        }\n\t    }, {\n\t        key: 'replaceDifferent',\n\t        value: function replaceDifferent(msg, name, rule, params) {\n\t            return this.replaceSame(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceDigits',\n\t        value: function replaceDigits(msg, name, rule, params) {\n\t            return this.strReplace(':digits', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceDigitsBetween',\n\t        value: function replaceDigitsBetween(msg, name, rule, params) {\n\t            return this.replaceBetween(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceMin',\n\t        value: function replaceMin(msg, name, rule, params) {\n\t            return this.strReplace(':min', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceMax',\n\t        value: function replaceMax(msg, name, rule, params) {\n\t            return this.strReplace(':max', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceIn',\n\t        value: function replaceIn(msg, name, rule, params) {\n\t            var self = this;\n\t            params = params.map(function (value) {\n\t                return self.getDisplayableValue(name, value);\n\t            });\n\t\n\t            return this.strReplace(':values', params.join(', '), msg);\n\t        }\n\t    }, {\n\t        key: 'replaceNotIn',\n\t        value: function replaceNotIn(msg, name, rule, params) {\n\t            return this.replaceIn(msg, name, rule, params);\n\t        }\n\t\n\t        // replaceInArray()\n\t        // replaceMimes()\n\t\n\t    }, {\n\t        key: 'replaceRequiredWith',\n\t        value: function replaceRequiredWith(msg, name, rule, params) {\n\t            params = this.getDataNameList(params);\n\t\n\t            return this.strReplace(':values', params.join(' / '), msg);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredWithAll',\n\t        value: function replaceRequiredWithAll(msg, name, rule, params) {\n\t            return this.replaceRequiredWith(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredWithout',\n\t        value: function replaceRequiredWithout(msg, name, rule, params) {\n\t            return this.replaceRequiredWith(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredWithoutAll',\n\t        value: function replaceRequiredWithoutAll(msg, name, rule, params) {\n\t            return this.replaceRequiredWith(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredIf',\n\t        value: function replaceRequiredIf(msg, name, rule, params) {\n\t            params[1] = this.getDisplayableValue(params[0], this.data[params[0]]);\n\t\n\t            params[0] = this.getDataName(params[0]);\n\t\n\t            return this.strReplace([':other', ':value'], params, msg);\n\t        }\n\t    }, {\n\t        key: 'replaceRequiredUnless',\n\t        value: function replaceRequiredUnless(msg, name, rule, params) {\n\t            var other = this.getDataName(params.shift());\n\t\n\t            return this.strReplace([':other', ':values'], [other, params.join(', ')], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceSame',\n\t        value: function replaceSame(msg, name, rule, params) {\n\t            return this.strReplace(':other', name, msg);\n\t        }\n\t    }, {\n\t        key: 'replaceSize',\n\t        value: function replaceSize(msg, name, rule, params) {\n\t            return this.strReplace(':size', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceBefore',\n\t        value: function replaceBefore(msg, name, rule, params) {\n\t            if (isNaN(Date.parse(params[0]))) {\n\t                return this.strReplace(':date', this.getDataName(params[0]), msg);\n\t            }\n\t\n\t            return this.strReplace(':date', params[0], msg);\n\t        }\n\t    }, {\n\t        key: 'replaceAfter',\n\t        value: function replaceAfter(msg, name, rule, params) {\n\t            return this.replaceBefore(msg, name, rule, params);\n\t        }\n\t    }, {\n\t        key: 'dependsOnOtherFields',\n\t        value: function dependsOnOtherFields(rule) {\n\t            return this.dependentRules.indexOf(rule);\n\t        }\n\t    }, {\n\t        key: 'dateRules',\n\t        get: function get() {\n\t            return ['Before', 'After', 'DateBetween'];\n\t        }\n\t    }, {\n\t        key: 'sizeRules',\n\t        get: function get() {\n\t            return ['Size', 'Between', 'Min', 'Max'];\n\t        }\n\t    }, {\n\t        key: 'numericRules',\n\t        get: function get() {\n\t            return ['Numeric', 'Integer'];\n\t        }\n\t    }, {\n\t        key: 'implicitRules',\n\t        get: function get() {\n\t            return ['Required', 'Filled', 'RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll', 'RequiredIf', 'RequiredUnless', 'Accepted', 'Present'];\n\t        }\n\t    }, {\n\t        key: 'dependentRules',\n\t        get: function get() {\n\t            return ['RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll', 'RequiredIf', 'RequiredUnless', 'Confirmed', 'Same', 'Different', 'Unique', 'Before', 'After'];\n\t        }\n\t    }], [{\n\t        key: 'make',\n\t        value: function make(data, rules) {\n\t            var customMessages = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\t            var customNames = arguments[3];\n\t\n\t            return new Validator(data, rules, customMessages, customNames);\n\t        }\n\t    }]);\n\t\n\t    return Validator;\n\t}();\n\t\n\texports.default = Validator;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = {\n\t    'accepted': 'The :attr must be accepted.',\n\t    // 'active_url'           : 'The :attr is not a valid URL.',\n\t    'after': 'The :attr must be a date after :date.',\n\t    'alpha': 'The :attr may only contain letters.',\n\t    'alpha_dash': 'The :attr may only contain letters, numbers, and dashes.',\n\t    'alpha_num': 'The :attr may only contain letters and numbers.',\n\t    'array': 'The :attr must be an array.',\n\t    'before': 'The :attr must be a date before :date.',\n\t    'between': {\n\t        'numeric': 'The :attr must be between :min and :max.',\n\t        'file': 'The :attr must be between :min and :max kilobytes.',\n\t        'string': 'The :attr must be between :min and :max characters.',\n\t        'array': 'The :attr must have between :min and :max items.'\n\t    },\n\t    'boolean': 'The :attr field must be true or false.',\n\t    'confirmed': 'The :attr confirmation does not match.',\n\t    'date': 'The :attr is not a valid date.',\n\t    'date_format': 'The :attr does not match the format :format.',\n\t    'different': 'The :attr and :other must be different.',\n\t    'digits': 'The :attr must be :digits digits.',\n\t    'digits_between': 'The :attr must be between :min and :max digits.',\n\t    'email': 'The :attr must be a valid email address.',\n\t    'exists': 'The selected :attr is invalid.',\n\t    'filled': 'The :attr field is required.',\n\t    'image': 'The :attr must be an image.',\n\t    'in': 'The selected :attr is invalid.',\n\t    'integer': 'The :attr must be an integer.',\n\t    'ip': 'The :attr must be a valid IP address.',\n\t    'json': 'The :attr must be a valid JSON string.',\n\t    'max': {\n\t        'numeric': 'The :attr may not be greater than :max.',\n\t        'file': 'The :attr may not be greater than :max kilobytes.',\n\t        'string': 'The :attr may not be greater than :max characters.',\n\t        'array': 'The :attr may not have more than :max items.'\n\t    },\n\t    'mimes': 'The :attr must be a file of type: :values.',\n\t    'min': {\n\t        'numeric': 'The :attr must be at least :min.',\n\t        'file': 'The :attr must be at least :min kilobytes.',\n\t        'string': 'The :attr must be at least :min characters.',\n\t        'array': 'The :attr must have at least :min items.'\n\t    },\n\t    'not_in': 'The selected :attr is invalid.',\n\t    'numeric': 'The :attr must be a number.',\n\t    'regex': 'The :attr format is invalid.',\n\t    'required': 'The :attr field is required.',\n\t    'required_if': 'The :attr field is required when :other is :value.',\n\t    'required_unless': 'The :attr field is required unless :other is in :values.',\n\t    'required_with': 'The :attr field is required when :values is present.',\n\t    'required_with_all': 'The :attr field is required when :values is present.',\n\t    'required_without': 'The :attr field is required when :values is not present.',\n\t    'required_without_all': 'The :attr field is required when none of :values are present.',\n\t    'same': 'The :attr and :other must match.',\n\t    'size': {\n\t        'numeric': 'The :attr must be :size.',\n\t        'file': 'The :attr must be :size kilobytes.',\n\t        'string': 'The :attr must be :size characters.',\n\t        'array': 'The :attr must contain :size items.'\n\t    },\n\t    'string': 'The :attr must be a string.',\n\t    // 'timezone'             : 'The :attr must be a valid zone.',\n\t    // 'unique'               : 'The :attr has already been taken.',\n\t    'url': 'The :attr format is invalid.'\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** Validator.umd.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 6250e570d5abc8cd1b60\n **/","import Messages from './Messages'\n\nexport default class Validator {\n    constructor(data, rules, customMessages = {}, customNames = {}) {\n        this.data = data\n        this.rules = this.parseRules(rules)\n        this.failedRules = []\n        this.errors = null\n        this.customMessages = customMessages\n        this.customNames = customNames\n        this.customValues = {}\n    }\n\n    get dateRules() {\n        return ['Before', 'After', 'DateBetween']\n    }\n\n    get sizeRules() {\n        return ['Size', 'Between', 'Min', 'Max']\n    }\n\n    get numericRules() {\n        return ['Numeric', 'Integer']\n    }\n\n    get implicitRules() {\n        return [\n            'Required', 'Filled', 'RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll',\n            'RequiredIf', 'RequiredUnless', 'Accepted', 'Present',\n        ]\n    }\n\n    get dependentRules() {\n        return [\n            'RequiredWith', 'RequiredWithAll', 'RequiredWithout', 'RequiredWithoutAll',\n            'RequiredIf', 'RequiredUnless', 'Confirmed', 'Same', 'Different', 'Unique',\n            'Before', 'After',\n        ]\n    }\n\n    static make(data, rules, customMessages = [], customNames) {\n        return new Validator(data, rules, customMessages, customNames)\n    }\n\n    isEmptyObject(obj) {\n        return Object.getOwnPropertyNames(obj).length === 0\n    }\n\n    isImplicit(rule) {\n        return this.implicitRules.indexOf(rule) > -1\n    }\n\n    hasData(name) {\n        return typeof(this.data[name]) !== 'undefined'\n    }\n\n    hasRule(name, rules) {\n        return this.getRule(name, rules) !== null\n    }\n\n    getRule(name, rulesToCheck) {\n        let a = this.rules.filter(function(item) {\n            return item.name === name\n        })\n\n        if (a.length === 0) {\n            return null\n        } else {\n            a = a[0]\n        }\n\n        if (! Array.isArray(rulesToCheck)) {\n            rulesToCheck = [rulesToCheck]\n        }\n\n        let b = a.rules.filter(function(rule) {\n            return rulesToCheck.indexOf(rule.name) >= 0\n        })\n\n        return b.length === 0 ? null : [ b[0].name, b[0].params ]\n    }\n\n    requireParameterCount(count, params, rule) {\n        if (params.length < count) {\n            throw new Error('Validation rule '+rule+' requires at least '+count+' parameters')\n        }\n    }\n\n    parseRules(rules) {\n        let self = this\n        let arr = []\n\n        rules.forEach(function(item) {\n            arr.push({\n                name: item.name,\n                rules: self.parseItemRules(item.rules)\n            })\n        })\n\n        return arr\n    }\n\n    parseItemRules(rule) {\n        let self = this\n        let arr = []\n\n        rule.split('|').forEach(function(ruleAndArgs) {\n            if (ruleAndArgs.trim()) {\n                let args = ruleAndArgs.split(':')\n                arr.push({\n                    name: self.titleCase(args[0], '_'),\n                    params: args[1] ? args[1].split(',') : []\n                })\n            }\n        })\n\n        return arr\n    }\n\n    titleCase(str, delimiter) {\n        delimiter = delimiter || ' '\n        return str.split(delimiter).map(function(item) {\n            return item[0].toUpperCase() + item.slice(1).toLowerCase()\n        }).join('')\n    }\n\n    snakeCase(str, delimiter) {\n        delimiter = delimiter || '_'\n        return str.replace(/(.)(?=[A-Z])/ug, '$1'+delimiter).toLowerCase()\n    }\n\n    getValue(name) {\n        if (typeof this.data[name] === 'undefined') {\n            return ''\n        }\n\n        return this.data[name]\n    }\n\n    passes() {\n        let self = this\n        this.errors = []\n        this.failedRules = []\n\n        this.rules.forEach(function(item) {\n            let name = item.name.toLowerCase()\n            item.rules.forEach(function(rule) {\n                self.validate(name, rule)\n            })\n        })\n\n        return this.errors.length === 0\n    }\n\n    fails() {\n        return !this.passes()\n    }\n\n    valid() {\n        if (! this.errors) {\n            this.passes()\n        }\n\n        let arr = []\n        for (let key in this.data) {\n            if (! this.hasError(key)) {\n                arr.push(key)\n            }\n        }\n\n        return arr\n    }\n\n    invalid() {\n        if (! this.errors) {\n            this.passes()\n        }\n\n        let arr = []\n        this.errors.forEach(function(error) {\n            if (arr.indexOf(error.name) < 0) {\n                arr.push(error.name)\n            }\n        })\n\n        return arr\n    }\n\n    getErrorMsg(name, rule) {\n        let msg = this.getMessage(name, rule)\n\n        return this.doReplacements(msg, name, rule)\n    }\n\n    getMessage(name, rule) {\n        let key = this.snakeCase(rule.name)\n        let msg = this.customMessages[name + '.' + key]\n\n        if (typeof(msg) !== 'undefined') {\n            return msg\n        }\n\n        msg = Messages[key]\n        // message might has sub-rule\n        if (typeof(msg) === 'object') {\n            let type = this.getDataType(name)\n            msg = Messages[key][type]\n        }\n\n        return typeof(msg) === 'undefined' ? '' : msg\n    }\n\n    getDataType(name) {\n        if (this.hasRule(name, this.numericRules)) {\n            return 'numeric'\n        } else if (this.hasRule(name, ['Array'])) {\n            return 'array'\n        }\n        /* SKIP file type */\n\n        return 'string'\n    }\n\n    doReplacements(msg, name, rule) {\n        if (msg.trim() === '') {\n            return ''\n        }\n\n        name = this.getDataName(name)\n\n        msg = msg.replace(':ATTR', name.toUpperCase())\n            .replace(':Attr', this.titleCase(name))\n            .replace(':attr', name)\n\n        // call replacer\n        let replacer = this['replace' + rule.name]\n        if (typeof replacer === 'function') {\n            msg = replacer.apply(this, [msg, name, rule.name, rule.params])\n        }\n\n        return msg\n    }\n\n    hasError(name = null) {\n        if (name === null) {\n            return this.errors.length > 0\n        }\n\n        let errors = this.errors.filter(function(error) {\n            return error.name === name.toLowerCase()\n        })\n\n        return errors.length > 0\n    }\n\n    getErrors() {\n        return this.errors\n    }\n\n    validate(name, rule) {\n        let value = this.getValue(name)\n        let method = this['validate' + rule.name]\n\n        if (typeof method !== 'function') {\n            console.error('\"' + rule.name + '\" validation rule does not exist!')\n        }\n\n        // return method.apply(this, [name, value, rule.params])\n        if (! method.apply(this, [name, value, rule.params])) {\n            this.addFailure(name, rule)\n        }\n    }\n/*\n    isValidatable(rule, name, value) {\n        return this.presentOrRuleIsImplicit(rule, name, value) &&\n               this.passesOptionalCheck(name) &&\n               this.hasNotFailedPreviousRuleIfPresenceRule(rule, name)\n    }\n\n    presentOrRuleIsImplicit(rule, name, value) {\n        return this.validateRequired(name, value) || this.isImplicit(rule)\n    }\n\n    passesOptionalCheck(name) {\n        return true\n    }\n\n    hasNotFailedPreviousRuleIfPresenceRule(rule, name) {\n        return true\n    }\n*/\n\n    addFailure(name, rule) {\n        this.addError(name, rule)\n\n        this.failedRules.push({\n            name: name,\n            rule: rule.name,\n            params: rule.params\n        })\n    }\n\n    addError(name, rule) {\n        let msg = this.getMessage(name, rule)\n\n        msg = this.doReplacements(msg, name, rule)\n\n        this.errors.push({\n            name: name,\n            rule: rule.name,\n            message: msg\n        })\n    }\n\n    /** Validation Rules **/\n\n    validateSometimes() {\n        return true\n    }\n\n    validateBail() {\n        return true\n    }\n\n    shouldStopValidating(name) {\n        if (! this.hasRule(name, ['Bail'])) {\n            return false\n        }\n\n        return this.hasError(name)\n    }\n\n    validateRequired(name, value, params) {\n        if (value === null) {\n            return false\n        } else if (typeof(value) === 'string' && value.trim() === '') {\n            return false\n        } else if (Array.isArray(value) && value.length < 1) {\n            return false\n        }\n\n        return true\n    }\n\n    validatePresent(name, value, params) {\n        return typeof(this.data[name]) !== 'undefined'\n    }\n\n    validateFilled(name, value) {\n        if (this.hasData(name)) {\n            return this.validateRequired(name, value)\n        }\n\n        return true\n    }\n\n    anyFailingRequired(names) {\n        let self = this\n        let result = false\n\n        names.forEach(function(name) {\n            if (! self.validateRequired(name, self.getValue(name))) {\n                result = true\n                return\n            }\n        })\n\n        return result\n    }\n\n    allFailingRequired(names) {\n        let self = this\n        let result = true\n\n        names.forEach(function(name) {\n            if (self.validateRequired(name, self.getValue(name))) {\n                result = false\n                return\n            }\n        })\n\n        return result\n    }\n\n    validateRequiredWith(name, value, params) {\n        if (! this.allFailingRequired(params)) {\n            return this.validateRequired(name, value)\n        }\n\n        return true\n    }\n\n    validateRequiredWithAll(name, value, params) {\n        if (! this.anyFailingRequired(params)) {\n            return this.validateRequired(name, value)\n        }\n\n        return true\n    }\n\n    validateRequiredWithout(name, value, params) {\n        if (this.anyFailingRequired(params)) {\n            return this.validateRequired(name, value)\n        }\n\n        return true\n    }\n\n    validateRequiredWithoutAll(name, value, params) {\n        if (this.allFailingRequired(params)) {\n            return this.validateRequired(name, value)\n        }\n\n        return true\n    }\n\n    validateRequiredIf(name, value, params) {\n        this.requireParameterCount(2, params, 'required_if')\n\n        let data = this.getValue(params[0])\n        if (typeof(data) === 'boolean') {\n            data = data.toString()\n        }\n\n        let values = params.slice(1)\n\n        if (values.indexOf(data) >= 0) {\n            return this.validateRequired(name, value)\n        }\n\n        return true\n    }\n\n    validateRequiredUnless(name, value, params) {\n        this.requireParameterCount(2, params, 'required_unless')\n\n        let data = this.getValue(params[0])\n\n        let values = params.slice(1)\n\n        if (values.indexOf(data) < 0) {\n            return this.validateRequired(name, value)\n        }\n\n        return true\n    }\n\n    getPresentCount(names) {\n        let self = this\n        let count = 0\n\n        names.forEach(function(name) {\n            if (typeof(self.data[name]) !== 'undefined') {\n                count++\n            }\n        })\n\n        return count\n    }\n\n    validateMatch(name, value, params) {\n        if (!(params instanceof Array)) {\n            params = [params];\n        }\n\n        if (!(value instanceof Array)) {\n            value = [value]\n        }\n\n        let re = params[0]\n\n        if (!(re instanceof RegExp)) {\n            re = re.split('/')\n            re = new RegExp(re[1], re[2])\n        }\n\n        return re.test(value)\n    }\n\n    validateRegex(name, value, params) {\n        return this.validateMatch(name, value, params);\n    }\n\n    validateAccepted(name, value) {\n        let acceptable = ['yes', 'on', '1', 1, true, 'true']\n\n        return this.validateRequired(name, value) && (acceptable.indexOf(value) >= 0)\n    }\n\n    validateArray(name, value) {\n        if (typeof(this.data[name]) === 'undefined') {\n            return true\n        }\n\n        return value === null || Array.isArray(value)\n    }\n\n    validateConfirmed(name, value) {\n        return this.validateSame(name, value, [name+'_confirmation'])\n    }\n\n    validateSame(name, value, params) {\n        this.requireParameterCount(1, params, 'same')\n\n        let other = this.data[params[0]]\n\n        return typeof(other) !== 'undefined' && value === other\n    }\n\n    validateDifferent(name, value, params) {\n        this.requireParameterCount(1, params, 'different')\n\n        let other = this.data[params[0]]\n\n        return typeof(other) !== 'undefined' && value !== other\n    }\n\n    validateDigits(name, value, params) {\n        this.requireParameterCount(1, params, 'digits')\n\n        return this.validateNumeric(name, value)\n            && value.toString().length == params[0]\n    }\n\n    validateDigitsBetween(name, value, params) {\n        this.requireParameterCount(2, params, 'digits_between')\n\n        let len = value.toString().length\n\n        return this.validateNumeric(name, value)\n            && len >= params[0] && len <= params[1]\n    }\n\n    validateSize(name, value, params) {\n        this.requireParameterCount(1, params, 'size')\n\n        return this.getSize(name, value) == params[0]\n    }\n\n    validateBetween(name, value, params) {\n        this.requireParameterCount(2, params, 'between')\n\n        let size = this.getSize(name, value)\n\n        return size >= params[0] && size <= params[1]\n    }\n\n    validateMin(name, value, params) {\n        this.requireParameterCount(1, params, 'min')\n\n        return this.getSize(name, value) >= params[0]\n    }\n\n    validateMax(name, value, params) {\n        this.requireParameterCount(1, params, 'max')\n\n        return this.getSize(name, value) <= params[0]\n    }\n\n    getSize(name, value) {\n        let hasNumeric = this.hasRule(name, this.numericRules)\n\n        if (hasNumeric && !isNaN(parseFloat(value))) {\n            return parseFloat(value)\n        }\n\n        // for array and string\n        return value.length\n    }\n\n    validateIn(name, value, params) {\n        if (Array.isArray(value) && this.hasRule(name, 'Array')) {\n            let arr = this.arrayDiff(value, params)\n            return arr.length === 0\n        }\n\n        return params.indexOf(value) >= 0\n    }\n\n    arrayDiff(arr1, arr2) {\n        let diff = []\n        arr1.forEach(function(item) {\n            if (arr2.indexOf(item) < 0) {\n                diff.push(item)\n            }\n        })\n        return diff\n    }\n\n    validateNotIn(name, value, params) {\n        this.requireParameterCount(1, params, 'not_in')\n\n        return ! this.validateIn(name, value, params)\n    }\n\n    validateNumeric(name, value) {\n        return this.validateMatch(name, value, /^-?\\d+(\\.\\d*)?$/)\n    }\n\n    validateInteger(name, value) {\n        return this.validateMatch(name, value, /^-?\\d+$/)\n    }\n\n    validateString(name, value) {\n        if (! this.hasData(name)) {\n            return true\n        }\n\n        return value === null || typeof(value) === 'string'\n    }\n\n    validateEmail(name, value) {\n        return this.validateMatch(name, value, /^[A-Z0-9._%+\\-]+@[A-Z0-9.\\-]+\\.[A-Z]{2,4}$/i)\n    }\n\n    validateIp(name, value) {\n        let segments = value.split('.')\n\n        if (segments.length === 4 &&\n                this.validateBetween(name, segments[0], [1, 255]) &&\n                this.validateBetween(name, segments[1], [0, 255]) &&\n                this.validateBetween(name, segments[2], [0, 255]) &&\n                this.validateBetween(name, segments[3], [1, 255])\n            ) {\n            return true\n        }\n\n        return false\n    }\n\n    validateUrl(name, value) {\n        return this.validateMatch(name, value, /^(https?|ftp):\\/\\/[^\\s\\/$.?#].[^\\s]*$/i)\n    }\n\n    validateAlpha(name, value) {\n        return this.validateMatch(name, value, /^([a-z])+$/i)\n    }\n\n    validateAlphaNum(name, value) {\n        return this.validateMatch(name, value, /^([a-z0-9])+$/i)\n    }\n\n    validateAlphaDash(name, value) {\n        return this.validateMatch(name, value, /^([a-z0-9_\\-])+$/i)\n    }\n\n    validateBefore(name, value, params) {\n        this.requireParameterCount(1, params, 'before')\n\n        if (typeof(value) !== 'string' && typeof(value) !== 'number' && !(value instanceof Date)) {\n            return false\n        }\n\n        let date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0]\n\n        if( ! this.validateDate(name, date)) {\n            console.error(params[0] + ' does not appear to be a date.')\n            return false\n        }\n\n        return (Date.parse(value) < Date.parse(date))\n    }\n\n    validateAfter(name, value, params) {\n        this.requireParameterCount(1, params, 'after')\n\n        if (typeof(value) !== 'string' && typeof(value) !== 'number' && !(value instanceof Date)) {\n            return false\n        }\n\n        let date = this.hasData(params[0]) ? this.getValue(params[0]) : params[0]\n\n        if( ! this.validateDate(name, date)) {\n            console.error(params[0] + ' does not appear to be a date.')\n            return false\n        }\n\n        return (Date.parse(value) > Date.parse(date))\n    }\n\n    validateDate(name, value) {\n        if (value instanceof Date) {\n            return true\n        }\n\n        if (typeof(value) !== 'string' && typeof(value) !== 'number') {\n            return false\n        }\n\n        return ! isNaN(Date.parse(value))\n    }\n\n    validateBoolean(name, value) {\n        if (! this.hasData(name)) {\n            return true\n        }\n\n        let acceptable = [true, false, 0, 1, '0', '1']\n\n        return value === null || acceptable.indexOf(value) >= 0\n    }\n\n    validateJson(name, value) {\n        try {\n            JSON.parse(value)\n            return true\n        } catch(err) {\n            return false\n        }\n    }\n\n    /*---- Replacers ----*/\n    strReplace(find, replace, string) {\n        if (! Array.isArray(find)) {\n            find = [find]\n        }\n        if (! Array.isArray(replace)) {\n            replace = [replace]\n        }\n        for (let i = 0; i < find.length; i++) {\n            string = string.replace(find[i], replace[i])\n        }\n\n        return string\n    }\n\n    getDisplayableValue(name, value) {\n        if (typeof(this.customValues[name]) !== 'undefined' &&\n            typeof(this.customValues[name][value]) !== 'undefined') {\n            return this.customValues[name][value]\n        }\n\n        return value\n    }\n\n    // getAttributeList\n    getDataNameList(values) {\n        let names = []\n\n        for (let key in values) {\n            names.push({\n                key : this.getDataName(values[key])\n            })\n        }\n\n        return names\n    }\n\n    // getAttribute\n    getDataName(name) {\n        if (typeof(this.customNames[name]) !== 'undefined') {\n            return this.customNames[name]\n        }\n\n        return this.strReplace('_', ' ', this.snakeCase(name))\n    }\n\n    // setAttributeNames\n    setCustomNames(names) {\n        this.customNames = names\n\n        return this\n    }\n\n    addCustomNames(customNames) {\n        for (let key in customNames) {\n            this.customNames[key] = customNames[key]\n        }\n\n        return this\n    }\n\n    getCustomValues() {\n        return this.customValues\n    }\n\n    addCustomValues(customValues) {\n        for (let key in customValues) {\n            this.customValues[key] = customValues[key]\n        }\n    }\n\n    setValueNames(values) {\n        this.customValues = values\n\n        return this\n    }\n\n    failed() {\n        return this.failedRules\n    }\n\n    replaceBetween(msg, name, rule, params) {\n        return this.strReplace([':min', ':max'], params, msg)\n    }\n\n    replaceDifferent(msg, name, rule, params) {\n        return this.replaceSame(msg, name, rule, params)\n    }\n\n    replaceDigits(msg, name, rule, params) {\n        return this.strReplace(':digits', params[0], msg)\n    }\n\n    replaceDigitsBetween(msg, name, rule, params) {\n        return this.replaceBetween(msg, name, rule, params)\n    }\n\n    replaceMin(msg, name, rule, params) {\n      return this.strReplace(':min', params[0], msg)\n    }\n\n    replaceMax(msg, name, rule, params) {\n        return this.strReplace(':max', params[0], msg)\n    }\n\n    replaceIn(msg, name, rule, params) {\n        let self = this\n        params = params.map(function(value) {\n            return self.getDisplayableValue(name, value)\n        })\n\n        return this.strReplace(':values', params.join(', '), msg)\n    }\n\n    replaceNotIn(msg, name, rule, params) {\n        return this.replaceIn(msg, name, rule, params)\n    }\n\n    // replaceInArray()\n    // replaceMimes()\n\n    replaceRequiredWith(msg, name, rule, params) {\n        params = this.getDataNameList(params)\n\n        return this.strReplace(':values', params.join(' / '), msg)\n    }\n\n    replaceRequiredWithAll(msg, name, rule, params) {\n        return this.replaceRequiredWith(msg, name, rule, params)\n    }\n\n    replaceRequiredWithout(msg, name, rule, params) {\n        return this.replaceRequiredWith(msg, name, rule, params)\n    }\n\n    replaceRequiredWithoutAll(msg, name, rule, params) {\n        return this.replaceRequiredWith(msg, name, rule, params)\n    }\n\n    replaceRequiredIf(msg, name, rule, params) {\n        params[1] = this.getDisplayableValue(params[0], this.data[params[0]])\n\n        params[0] = this.getDataName(params[0])\n\n        return this.strReplace([':other', ':value'], params, msg)\n    }\n\n    replaceRequiredUnless(msg, name, rule, params) {\n        let other = this.getDataName(params.shift())\n\n        return this.strReplace([':other', ':values'], [other, params.join(', ')], msg)\n    }\n\n    replaceSame(msg, name, rule, params) {\n        return this.strReplace(':other', name, msg)\n    }\n\n    replaceSize(msg, name, rule, params) {\n        return this.strReplace(':size', params[0], msg)\n    }\n\n    replaceBefore(msg, name, rule, params) {\n        if (isNaN(Date.parse(params[0]))) {\n            return this.strReplace(':date', this.getDataName(params[0]), msg)\n        }\n\n        return this.strReplace(':date', params[0], msg)\n    }\n\n    replaceAfter(msg, name, rule, params) {\n        return this.replaceBefore(msg, name, rule, params)\n    }\n\n    dependsOnOtherFields(rule) {\n        return this.dependentRules.indexOf(rule)\n    }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Validator.js\n **/","export default {\n    'accepted'             : 'The :attr must be accepted.',\n    // 'active_url'           : 'The :attr is not a valid URL.',\n    'after'                : 'The :attr must be a date after :date.',\n    'alpha'                : 'The :attr may only contain letters.',\n    'alpha_dash'           : 'The :attr may only contain letters, numbers, and dashes.',\n    'alpha_num'            : 'The :attr may only contain letters and numbers.',\n    'array'                : 'The :attr must be an array.',\n    'before'               : 'The :attr must be a date before :date.',\n    'between'              : {\n        'numeric' : 'The :attr must be between :min and :max.',\n        'file'    : 'The :attr must be between :min and :max kilobytes.',\n        'string'  : 'The :attr must be between :min and :max characters.',\n        'array'   : 'The :attr must have between :min and :max items.',\n    },\n    'boolean'              : 'The :attr field must be true or false.',\n    'confirmed'            : 'The :attr confirmation does not match.',\n    'date'                 : 'The :attr is not a valid date.',\n    'date_format'          : 'The :attr does not match the format :format.',\n    'different'            : 'The :attr and :other must be different.',\n    'digits'               : 'The :attr must be :digits digits.',\n    'digits_between'       : 'The :attr must be between :min and :max digits.',\n    'email'                : 'The :attr must be a valid email address.',\n    'exists'               : 'The selected :attr is invalid.',\n    'filled'               : 'The :attr field is required.',\n    'image'                : 'The :attr must be an image.',\n    'in'                   : 'The selected :attr is invalid.',\n    'integer'              : 'The :attr must be an integer.',\n    'ip'                   : 'The :attr must be a valid IP address.',\n    'json'                 : 'The :attr must be a valid JSON string.',\n    'max'                  : {\n        'numeric' : 'The :attr may not be greater than :max.',\n        'file'    : 'The :attr may not be greater than :max kilobytes.',\n        'string'  : 'The :attr may not be greater than :max characters.',\n        'array'   : 'The :attr may not have more than :max items.',\n    },\n    'mimes'                : 'The :attr must be a file of type: :values.',\n    'min'                  : {\n        'numeric' : 'The :attr must be at least :min.',\n        'file'    : 'The :attr must be at least :min kilobytes.',\n        'string'  : 'The :attr must be at least :min characters.',\n        'array'   : 'The :attr must have at least :min items.',\n    },\n    'not_in'               : 'The selected :attr is invalid.',\n    'numeric'              : 'The :attr must be a number.',\n    'regex'                : 'The :attr format is invalid.',\n    'required'             : 'The :attr field is required.',\n    'required_if'          : 'The :attr field is required when :other is :value.',\n    'required_unless'      : 'The :attr field is required unless :other is in :values.',\n    'required_with'        : 'The :attr field is required when :values is present.',\n    'required_with_all'    : 'The :attr field is required when :values is present.',\n    'required_without'     : 'The :attr field is required when :values is not present.',\n    'required_without_all' : 'The :attr field is required when none of :values are present.',\n    'same'                 : 'The :attr and :other must match.',\n    'size'                 : {\n        'numeric' : 'The :attr must be :size.',\n        'file'    : 'The :attr must be :size kilobytes.',\n        'string'  : 'The :attr must be :size characters.',\n        'array'   : 'The :attr must contain :size items.',\n    },\n    'string'               : 'The :attr must be a string.',\n    // 'timezone'             : 'The :attr must be a valid zone.',\n    // 'unique'               : 'The :attr has already been taken.',\n    'url'                  : 'The :attr format is invalid.',\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Messages.js\n **/"],"sourceRoot":""}